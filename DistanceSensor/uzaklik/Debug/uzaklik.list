
uzaklik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003c48  08003c48  00013c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc8  08003cc8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cc8  08003cc8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cc8  08003cc8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000084  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008bd1  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a3d  00000000  00000000  00028c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000858  00000000  00000000  0002a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000648  00000000  00000000  0002aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f87a  00000000  00000000  0002b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b932  00000000  00000000  0004adba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc2d5  00000000  00000000  000566ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000021f0  00000000  00000000  001129c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00114bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003c30 	.word	0x08003c30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08003c30 	.word	0x08003c30

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <DWT_Delay_Init+0x58>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <DWT_Delay_Init+0x58>)
 80009be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009c2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <DWT_Delay_Init+0x58>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <DWT_Delay_Init+0x58>)
 80009ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ce:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009d6:	f023 0301 	bic.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80009ee:	bf00      	nop
     __ASM volatile ("NOP");
 80009f0:	bf00      	nop
  __ASM volatile ("NOP");
 80009f2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80009fc:	2300      	movs	r3, #0
 80009fe:	e000      	b.n	8000a02 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000a00:	2301      	movs	r3, #1
  }
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000edf0 	.word	0xe000edf0
 8000a10:	e0001000 	.word	0xe0001000

08000a14 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000a1e:	4a38      	ldr	r2, [pc, #224]	; (8000b00 <HD44780_Init+0xec>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000a24:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <HD44780_Init+0xf0>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <HD44780_Init+0xf4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <HD44780_Init+0xec>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d907      	bls.n	8000a48 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000a38:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <HD44780_Init+0xf4>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <HD44780_Init+0xf4>)
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e006      	b.n	8000a56 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000a48:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <HD44780_Init+0xf4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HD44780_Init+0xf4>)
 8000a54:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000a56:	f000 f985 	bl	8000d64 <DelayInit>
  HAL_Delay(50);
 8000a5a:	2032      	movs	r0, #50	; 0x32
 8000a5c:	f000 fd0c 	bl	8001478 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000a60:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <HD44780_Init+0xf0>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f943 	bl	8000cf0 <ExpanderWrite>
  HAL_Delay(1000);
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f000 fd03 	bl	8001478 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000a72:	2030      	movs	r0, #48	; 0x30
 8000a74:	f000 f92b 	bl	8000cce <Write4Bits>
  DelayUS(4500);
 8000a78:	f241 1094 	movw	r0, #4500	; 0x1194
 8000a7c:	f000 f99c 	bl	8000db8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000a80:	2030      	movs	r0, #48	; 0x30
 8000a82:	f000 f924 	bl	8000cce <Write4Bits>
  DelayUS(4500);
 8000a86:	f241 1094 	movw	r0, #4500	; 0x1194
 8000a8a:	f000 f995 	bl	8000db8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000a8e:	2030      	movs	r0, #48	; 0x30
 8000a90:	f000 f91d 	bl	8000cce <Write4Bits>
  DelayUS(4500);
 8000a94:	f241 1094 	movw	r0, #4500	; 0x1194
 8000a98:	f000 f98e 	bl	8000db8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000a9c:	2020      	movs	r0, #32
 8000a9e:	f000 f916 	bl	8000cce <Write4Bits>
  DelayUS(100);
 8000aa2:	2064      	movs	r0, #100	; 0x64
 8000aa4:	f000 f988 	bl	8000db8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HD44780_Init+0xf4>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f043 0320 	orr.w	r3, r3, #32
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f8ce 	bl	8000c54 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HD44780_Init+0xf8>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000abe:	f000 f875 	bl	8000bac <HD44780_Display>
  HD44780_Clear();
 8000ac2:	f000 f82b 	bl	8000b1c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HD44780_Init+0xfc>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HD44780_Init+0xfc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f8bc 	bl	8000c54 <SendCommand>
  DelayUS(4500);
 8000adc:	f241 1094 	movw	r0, #4500	; 0x1194
 8000ae0:	f000 f96a 	bl	8000db8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000ae4:	490b      	ldr	r1, [pc, #44]	; (8000b14 <HD44780_Init+0x100>)
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f876 	bl	8000bd8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000aec:	490a      	ldr	r1, [pc, #40]	; (8000b18 <HD44780_Init+0x104>)
 8000aee:	2001      	movs	r0, #1
 8000af0:	f000 f872 	bl	8000bd8 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000af4:	f000 f81d 	bl	8000b32 <HD44780_Home>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000003b 	.word	0x2000003b
 8000b04:	2000003c 	.word	0x2000003c
 8000b08:	20000038 	.word	0x20000038
 8000b0c:	20000039 	.word	0x20000039
 8000b10:	2000003a 	.word	0x2000003a
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000008 	.word	0x20000008

08000b1c <HD44780_Clear>:

void HD44780_Clear()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 f897 	bl	8000c54 <SendCommand>
  DelayUS(2000);
 8000b26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b2a:	f000 f945 	bl	8000db8 <DelayUS>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HD44780_Home>:

void HD44780_Home()
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000b36:	2002      	movs	r0, #2
 8000b38:	f000 f88c 	bl	8000c54 <SendCommand>
  DelayUS(2000);
 8000b3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b40:	f000 f93a 	bl	8000db8 <DelayUS>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HD44780_SetCursor+0x5c>)
 8000b5a:	f107 0408 	add.w	r4, r7, #8
 8000b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HD44780_SetCursor+0x60>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	79ba      	ldrb	r2, [r7, #6]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d303      	bcc.n	8000b76 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HD44780_SetCursor+0x60>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000b76:	79bb      	ldrb	r3, [r7, #6]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	3318      	adds	r3, #24
 8000b7c:	443b      	add	r3, r7
 8000b7e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4413      	add	r3, r2
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f85d 	bl	8000c54 <SendCommand>
}
 8000b9a:	bf00      	nop
 8000b9c:	371c      	adds	r7, #28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd90      	pop	{r4, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	08003c48 	.word	0x08003c48
 8000ba8:	2000003b 	.word	0x2000003b

08000bac <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HD44780_Display+0x28>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HD44780_Display+0x28>)
 8000bbc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HD44780_Display+0x28>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f843 	bl	8000c54 <SendCommand>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000039 	.word	0x20000039

08000bd8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f82a 	bl	8000c54 <SendCommand>
  for (int i=0; i<8; i++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	e009      	b.n	8000c1a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f82e 	bl	8000c70 <SendChar>
  for (int i=0; i<8; i++)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b07      	cmp	r3, #7
 8000c1e:	ddf2      	ble.n	8000c06 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000c32:	e006      	b.n	8000c42 <HD44780_PrintStr+0x18>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f817 	bl	8000c70 <SendChar>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f4      	bne.n	8000c34 <HD44780_PrintStr+0xa>
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f812 	bl	8000c8c <Send>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f804 	bl	8000c8c <Send>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	460a      	mov	r2, r1
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f023 030f 	bic.w	r3, r3, #15
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f80b 	bl	8000cce <Write4Bits>
  Write4Bits((lownib)|mode);
 8000cb8:	7bba      	ldrb	r2, [r7, #14]
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f804 	bl	8000cce <Write4Bits>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f808 	bl	8000cf0 <ExpanderWrite>
  PulseEnable(value);
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f820 	bl	8000d28 <PulseEnable>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af02      	add	r7, sp, #8
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <ExpanderWrite+0x30>)
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000d06:	f107 020f 	add.w	r2, r7, #15
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	214e      	movs	r1, #78	; 0x4e
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <ExpanderWrite+0x34>)
 8000d14:	f000 ff04 	bl	8001b20 <HAL_I2C_Master_Transmit>
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000003c 	.word	0x2000003c
 8000d24:	20000040 	.word	0x20000040

08000d28 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ffd8 	bl	8000cf0 <ExpanderWrite>
  DelayUS(20);
 8000d40:	2014      	movs	r0, #20
 8000d42:	f000 f839 	bl	8000db8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f023 0304 	bic.w	r3, r3, #4
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ffce 	bl	8000cf0 <ExpanderWrite>
  DelayUS(20);
 8000d54:	2014      	movs	r0, #20
 8000d56:	f000 f82f 	bl	8000db8 <DelayUS>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <DelayInit>:

static void DelayInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <DelayInit+0x4c>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <DelayInit+0x4c>)
 8000d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d72:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DelayInit+0x4c>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <DelayInit+0x4c>)
 8000d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DelayInit+0x50>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <DelayInit+0x50>)
 8000d86:	f023 0301 	bic.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <DelayInit+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <DelayInit+0x50>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <DelayInit+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000d9e:	bf00      	nop
  __ASM volatile ("NOP");
 8000da0:	bf00      	nop
  __ASM volatile ("NOP");
 8000da2:	bf00      	nop
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000edf0 	.word	0xe000edf0
 8000db4:	e0001000 	.word	0xe0001000

08000db8 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <DelayUS+0x44>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <DelayUS+0x48>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	0c9a      	lsrs	r2, r3, #18
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <DelayUS+0x4c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <DelayUS+0x4c>)
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f6      	bhi.n	8000dda <DelayUS+0x22>
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000010 	.word	0x20000010
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	e0001000 	.word	0xe0001000

08000e08 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <DWT_Delay_us+0x40>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e16:	f002 fc59 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <DWT_Delay_us+0x44>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	0c9b      	lsrs	r3, r3, #18
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e2c:	bf00      	nop
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <DWT_Delay_us+0x40>)
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1ad2      	subs	r2, r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d3f8      	bcc.n	8000e2e <DWT_Delay_us+0x26>
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e0001000 	.word	0xe0001000
 8000e4c:	431bde83 	.word	0x431bde83

08000e50 <Read_HCSR04>:
/* USER CODE BEGIN 0 */
uint32_t sensor_time;
uint16_t distance;

uint32_t Read_HCSR04()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	uint32_t local_time = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);		// pull the trig pin high
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f000 fdb4 	bl	80019d0 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);										// wait for 10 us
 8000e68:	200a      	movs	r0, #10
 8000e6a:	f7ff ffcd 	bl	8000e08 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);	// pull the trig pin low
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f000 fdaa 	bl	80019d0 <HAL_GPIO_WritePin>

	// wait for the echo pin to go high

	while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)));
 8000e7c:	bf00      	nop
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f000 fd8b 	bl	80019a0 <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f6      	beq.n	8000e7e <Read_HCSR04+0x2e>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))				// while the pin is high
 8000e90:	e005      	b.n	8000e9e <Read_HCSR04+0x4e>
	{
		local_time++;										// increment local time
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
		DWT_Delay_us(1);									// every 1 us
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ffb5 	bl	8000e08 <DWT_Delay_us>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))				// while the pin is high
 8000e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f000 fd7b 	bl	80019a0 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f0      	bne.n	8000e92 <Read_HCSR04+0x42>
	}

	return local_time * 2;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	005b      	lsls	r3, r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	0000      	movs	r0, r0
	...

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec6:	f000 fa71 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eca:	f000 f8a3 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 f93f 	bl	8001150 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ed2:	f000 f8fd 	bl	80010d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000ed6:	f7ff fd6d 	bl	80009b4 <DWT_Delay_Init>


   HD44780_Init(2);
 8000eda:	2002      	movs	r0, #2
 8000edc:	f7ff fd9a 	bl	8000a14 <HD44780_Init>
     HD44780_Clear();
 8000ee0:	f7ff fe1c 	bl	8000b1c <HD44780_Clear>
     HD44780_SetCursor(0,0);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fe2e 	bl	8000b48 <HD44780_SetCursor>
     HD44780_PrintStr("HELLO");
 8000eec:	4844      	ldr	r0, [pc, #272]	; (8001000 <main+0x140>)
 8000eee:	f7ff fe9c 	bl	8000c2a <HD44780_PrintStr>
   HAL_Delay(1000);
 8000ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef6:	f000 fabf 	bl	8001478 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HD44780_SetCursor(0,0);
 8000efa:	2100      	movs	r1, #0
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fe23 	bl	8000b48 <HD44780_SetCursor>

	  HD44780_PrintStr("WATER LEVEL:%");
 8000f02:	4840      	ldr	r0, [pc, #256]	; (8001004 <main+0x144>)
 8000f04:	f7ff fe91 	bl	8000c2a <HD44780_PrintStr>
		  sensor_time = Read_HCSR04();			// get the high time
 8000f08:	f7ff ffa2 	bl	8000e50 <Read_HCSR04>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <main+0x148>)
 8000f10:	6013      	str	r3, [r2, #0]
		  	  distance = sensor_time * .034 / 2;	// user the formula to get the distance
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <main+0x148>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff faa0 	bl	800045c <__aeabi_ui2d>
 8000f1c:	a336      	add	r3, pc, #216	; (adr r3, 8000ff8 <main+0x138>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fb15 	bl	8000550 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f36:	f7ff fc35 	bl	80007a4 <__aeabi_ddiv>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fd17 	bl	8000974 <__aeabi_d2uiz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b30      	ldr	r3, [pc, #192]	; (800100c <main+0x14c>)
 8000f4c:	801a      	strh	r2, [r3, #0]

		  	  wlevel = (28-distance) *5;
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <main+0x14c>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	f1c3 031c 	rsb	r3, r3, #28
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <main+0x150>)
 8000f62:	801a      	strh	r2, [r3, #0]
		  	if(distance>28){
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <main+0x14c>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b1c      	cmp	r3, #28
 8000f6a:	d917      	bls.n	8000f9c <main+0xdc>
		  		wlevel=0;
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <main+0x150>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	801a      	strh	r2, [r3, #0]
		  		snum[2]=' ';
 8000f72:	2320      	movs	r3, #32
 8000f74:	71bb      	strb	r3, [r7, #6]
		  		snum[1]=' ';
 8000f76:	2320      	movs	r3, #32
 8000f78:	717b      	strb	r3, [r7, #5]
		  		itoa(wlevel,snum,10);
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <main+0x150>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	220a      	movs	r2, #10
 8000f84:	4619      	mov	r1, r3
 8000f86:	f002 fde3 	bl	8003b50 <itoa>
		  		HD44780_SetCursor(13,0);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	200d      	movs	r0, #13
 8000f8e:	f7ff fddb 	bl	8000b48 <HD44780_SetCursor>
		  		HD44780_PrintStr(snum);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe48 	bl	8000c2a <HD44780_PrintStr>
 8000f9a:	e7ae      	b.n	8000efa <main+0x3a>
		  			  	  }
		  	else if(wlevel>100){
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <main+0x150>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d913      	bls.n	8000fcc <main+0x10c>
		  		wlevel=100;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <main+0x150>)
 8000fa6:	2264      	movs	r2, #100	; 0x64
 8000fa8:	801a      	strh	r2, [r3, #0]
		  		itoa(wlevel,snum,10);
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <main+0x150>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	220a      	movs	r2, #10
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f002 fdcb 	bl	8003b50 <itoa>
		  		HD44780_SetCursor(13,0);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	200d      	movs	r0, #13
 8000fbe:	f7ff fdc3 	bl	8000b48 <HD44780_SetCursor>
		  		HD44780_PrintStr(snum);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe30 	bl	8000c2a <HD44780_PrintStr>
 8000fca:	e796      	b.n	8000efa <main+0x3a>
		  	  }

		  	  else {
		  	  itoa(wlevel,snum,10);
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <main+0x150>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	220a      	movs	r2, #10
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f002 fdba 	bl	8003b50 <itoa>
		  	HD44780_SetCursor(13,0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200d      	movs	r0, #13
 8000fe0:	f7ff fdb2 	bl	8000b48 <HD44780_SetCursor>
		  	snum[2]=' ';
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	71bb      	strb	r3, [r7, #6]
		  	HD44780_PrintStr(snum);
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe1d 	bl	8000c2a <HD44780_PrintStr>
	  HD44780_SetCursor(0,0);
 8000ff0:	e783      	b.n	8000efa <main+0x3a>
 8000ff2:	bf00      	nop
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	b020c49c 	.word	0xb020c49c
 8000ffc:	3fa16872 	.word	0x3fa16872
 8001000:	08003c58 	.word	0x08003c58
 8001004:	08003c60 	.word	0x08003c60
 8001008:	20000098 	.word	0x20000098
 800100c:	20000094 	.word	0x20000094
 8001010:	20000096 	.word	0x20000096

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a6      	sub	sp, #152	; 0x98
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800101e:	2228      	movs	r2, #40	; 0x28
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f002 fdd8 	bl	8003bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2258      	movs	r2, #88	; 0x58
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fdca 	bl	8003bd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104c:	2310      	movs	r3, #16
 800104e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001060:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001072:	4618      	mov	r0, r3
 8001074:	f001 f8f0 	bl	8002258 <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800107e:	f000 f8c1 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2302      	movs	r3, #2
 8001088:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001092:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001098:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800109c:	2102      	movs	r1, #2
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 f92e 	bl	8003300 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010aa:	f000 f8ab 	bl	8001204 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010ae:	2320      	movs	r3, #32
 80010b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fb13 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010c4:	f000 f89e 	bl	8001204 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3798      	adds	r7, #152	; 0x98
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_I2C1_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_I2C1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_I2C1_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <MX_I2C1_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <MX_I2C1_Init+0x74>)
 800110c:	f000 fc78 	bl	8001a00 <HAL_I2C_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001116:	f000 f875 	bl	8001204 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_I2C1_Init+0x74>)
 800111e:	f001 f803 	bl	8002128 <HAL_I2CEx_ConfigAnalogFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001128:	f000 f86c 	bl	8001204 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800112c:	2100      	movs	r1, #0
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_I2C1_Init+0x74>)
 8001130:	f001 f845 	bl	80021be <HAL_I2CEx_ConfigDigitalFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 f863 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000040 	.word	0x20000040
 8001148:	40005400 	.word	0x40005400
 800114c:	2000090e 	.word	0x2000090e

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_GPIO_Init+0xb0>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a25      	ldr	r2, [pc, #148]	; (8001200 <MX_GPIO_Init+0xb0>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_GPIO_Init+0xb0>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_GPIO_Init+0xb0>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <MX_GPIO_Init+0xb0>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_GPIO_Init+0xb0>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_GPIO_Init+0xb0>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a19      	ldr	r2, [pc, #100]	; (8001200 <MX_GPIO_Init+0xb0>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_GPIO_Init+0xb0>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f000 fc0a 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f000 fa5a 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f4:	f000 fa4a 	bl	800168c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_MspInit+0x44>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_MspInit+0x44>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_MspInit+0x44>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_MspInit+0x44>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_MspInit+0x44>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_MspInit+0x44>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <HAL_I2C_MspInit+0x7c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d128      	bne.n	80012cc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_I2C_MspInit+0x80>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <HAL_I2C_MspInit+0x80>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_I2C_MspInit+0x80>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001298:	2312      	movs	r3, #18
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a4:	2304      	movs	r3, #4
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <HAL_I2C_MspInit+0x84>)
 80012b0:	f000 f9ec 	bl	800168c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_I2C_MspInit+0x80>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_I2C_MspInit+0x80>)
 80012ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012be:	61d3      	str	r3, [r2, #28]
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_I2C_MspInit+0x80>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40005400 	.word	0x40005400
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000400 	.word	0x48000400

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132c:	f000 f884 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <SystemInit+0x20>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <SystemInit+0x20>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001390 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800135c:	f7ff ffea 	bl	8001334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <LoopForever+0x6>)
  ldr r1, =_edata
 8001362:	490d      	ldr	r1, [pc, #52]	; (8001398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <LoopForever+0xe>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001378:	4c0a      	ldr	r4, [pc, #40]	; (80013a4 <LoopForever+0x16>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001386:	f002 fc2f 	bl	8003be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800138a:	f7ff fd99 	bl	8000ec0 <main>

0800138e <LoopForever>:

LoopForever:
    b LoopForever
 800138e:	e7fe      	b.n	800138e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001390:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800139c:	08003cd0 	.word	0x08003cd0
  ldr r2, =_sbss
 80013a0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80013a4:	200000a0 	.word	0x200000a0

080013a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_2_IRQHandler>
	...

080013ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_Init+0x28>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_Init+0x28>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f931 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	200f      	movs	r0, #15
 80013c4:	f000 f808 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff ff22 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40022000 	.word	0x40022000

080013d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f93b 	bl	8001672 <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 f911 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000010 	.word	0x20000010
 8001430:	20000018 	.word	0x20000018
 8001434:	20000014 	.word	0x20000014

08001438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000018 	.word	0x20000018
 800145c:	2000009c 	.word	0x2000009c

08001460 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;  
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	2000009c 	.word	0x2000009c

08001478 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ffee 	bl	8001460 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	d005      	beq.n	800149e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_Delay+0x44>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800149e:	bf00      	nop
 80014a0:	f7ff ffde 	bl	8001460 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f7      	bhi.n	80014a0 <HAL_Delay+0x28>
  {
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000018 	.word	0x20000018

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff8e 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff47 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff5c 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff8e 	bl	8001578 <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5d 	bl	8001524 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffb0 	bl	80015e0 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169a:	e160      	b.n	800195e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8152 	beq.w	8001958 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d005      	beq.n	80016cc <HAL_GPIO_Init+0x40>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d130      	bne.n	800172e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001702:	2201      	movs	r2, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	f003 0201 	and.w	r2, r3, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b03      	cmp	r3, #3
 8001738:	d017      	beq.n	800176a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d123      	bne.n	80017be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3208      	adds	r2, #8
 80017b8:	6939      	ldr	r1, [r7, #16]
 80017ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0203 	and.w	r2, r3, #3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80ac 	beq.w	8001958 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001800:	4b5e      	ldr	r3, [pc, #376]	; (800197c <HAL_GPIO_Init+0x2f0>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a5d      	ldr	r2, [pc, #372]	; (800197c <HAL_GPIO_Init+0x2f0>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b5b      	ldr	r3, [pc, #364]	; (800197c <HAL_GPIO_Init+0x2f0>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001818:	4a59      	ldr	r2, [pc, #356]	; (8001980 <HAL_GPIO_Init+0x2f4>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001842:	d025      	beq.n	8001890 <HAL_GPIO_Init+0x204>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a4f      	ldr	r2, [pc, #316]	; (8001984 <HAL_GPIO_Init+0x2f8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d01f      	beq.n	800188c <HAL_GPIO_Init+0x200>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a4e      	ldr	r2, [pc, #312]	; (8001988 <HAL_GPIO_Init+0x2fc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d019      	beq.n	8001888 <HAL_GPIO_Init+0x1fc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a4d      	ldr	r2, [pc, #308]	; (800198c <HAL_GPIO_Init+0x300>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d013      	beq.n	8001884 <HAL_GPIO_Init+0x1f8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <HAL_GPIO_Init+0x304>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00d      	beq.n	8001880 <HAL_GPIO_Init+0x1f4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a4b      	ldr	r2, [pc, #300]	; (8001994 <HAL_GPIO_Init+0x308>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d007      	beq.n	800187c <HAL_GPIO_Init+0x1f0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a4a      	ldr	r2, [pc, #296]	; (8001998 <HAL_GPIO_Init+0x30c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_GPIO_Init+0x1ec>
 8001874:	2306      	movs	r3, #6
 8001876:	e00c      	b.n	8001892 <HAL_GPIO_Init+0x206>
 8001878:	2307      	movs	r3, #7
 800187a:	e00a      	b.n	8001892 <HAL_GPIO_Init+0x206>
 800187c:	2305      	movs	r3, #5
 800187e:	e008      	b.n	8001892 <HAL_GPIO_Init+0x206>
 8001880:	2304      	movs	r3, #4
 8001882:	e006      	b.n	8001892 <HAL_GPIO_Init+0x206>
 8001884:	2303      	movs	r3, #3
 8001886:	e004      	b.n	8001892 <HAL_GPIO_Init+0x206>
 8001888:	2302      	movs	r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x206>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_GPIO_Init+0x206>
 8001890:	2300      	movs	r3, #0
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	f002 0203 	and.w	r2, r2, #3
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	4093      	lsls	r3, r2
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a2:	4937      	ldr	r1, [pc, #220]	; (8001980 <HAL_GPIO_Init+0x2f4>)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b0:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_GPIO_Init+0x310>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018d4:	4a31      	ldr	r2, [pc, #196]	; (800199c <HAL_GPIO_Init+0x310>)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_GPIO_Init+0x310>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018fe:	4a27      	ldr	r2, [pc, #156]	; (800199c <HAL_GPIO_Init+0x310>)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_GPIO_Init+0x310>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_GPIO_Init+0x310>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_GPIO_Init+0x310>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <HAL_GPIO_Init+0x310>)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f47f ae97 	bne.w	800169c <HAL_GPIO_Init+0x10>
  }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000
 8001984:	48000400 	.word	0x48000400
 8001988:	48000800 	.word	0x48000800
 800198c:	48000c00 	.word	0x48000c00
 8001990:	48001000 	.word	0x48001000
 8001994:	48001400 	.word	0x48001400
 8001998:	48001800 	.word	0x48001800
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e001      	b.n	80019c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ec:	e002      	b.n	80019f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e081      	b.n	8001b16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fc16 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2224      	movs	r2, #36	; 0x24
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e006      	b.n	8001a88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d104      	bne.n	8001a9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001abc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69d9      	ldr	r1, [r3, #28]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	817b      	strh	r3, [r7, #10]
 8001b30:	4613      	mov	r3, r2
 8001b32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	f040 80da 	bne.w	8001cf6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_I2C_Master_Transmit+0x30>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e0d3      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff fc82 	bl	8001460 <HAL_GetTick>
 8001b5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2319      	movs	r3, #25
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f8f0 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0be      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2221      	movs	r2, #33	; 0x21
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2210      	movs	r2, #16
 8001b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	893a      	ldrh	r2, [r7, #8]
 8001b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2bff      	cmp	r3, #255	; 0xff
 8001baa:	d90e      	bls.n	8001bca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	22ff      	movs	r2, #255	; 0xff
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	8979      	ldrh	r1, [r7, #10]
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 fa7e 	bl	80020c4 <I2C_TransferConfig>
 8001bc8:	e06c      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	8979      	ldrh	r1, [r7, #10]
 8001bdc:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fa6d 	bl	80020c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bea:	e05b      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	6a39      	ldr	r1, [r7, #32]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f8fc 	bl	8001dee <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e07b      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d034      	beq.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d130      	bne.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 f87f 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e04d      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2bff      	cmp	r3, #255	; 0xff
 8001c64:	d90e      	bls.n	8001c84 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	22ff      	movs	r2, #255	; 0xff
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fa21 	bl	80020c4 <I2C_TransferConfig>
 8001c82:	e00f      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	8979      	ldrh	r1, [r7, #10]
 8001c96:	2300      	movs	r3, #0
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fa10 	bl	80020c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d19e      	bne.n	8001bec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f8e2 	bl	8001e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e01a      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_I2C_Master_Transmit+0x1e4>)
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001cf6:	2302      	movs	r3, #2
  }
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	80002000 	.word	0x80002000
 8001d04:	fe00e800 	.word	0xfe00e800

08001d08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d103      	bne.n	8001d26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2200      	movs	r2, #0
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d007      	beq.n	8001d44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	619a      	str	r2, [r3, #24]
  }
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d60:	e031      	b.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d02d      	beq.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6a:	f7ff fb79 	bl	8001460 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d122      	bne.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d113      	bne.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f043 0220 	orr.w	r2, r3, #32
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d0be      	beq.n	8001d62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dfa:	e033      	b.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f87f 	bl	8001f04 <I2C_IsErrorOccurred>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e031      	b.n	8001e74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e16:	d025      	beq.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e18:	f7ff fb22 	bl	8001460 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d302      	bcc.n	8001e2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d11a      	bne.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d013      	beq.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e007      	b.n	8001e74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d1c4      	bne.n	8001dfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e88:	e02f      	b.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f838 	bl	8001f04 <I2C_IsErrorOccurred>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e02d      	b.n	8001efa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9e:	f7ff fadf 	bl	8001460 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d302      	bcc.n	8001eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d11a      	bne.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d013      	beq.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f043 0220 	orr.w	r2, r3, #32
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e007      	b.n	8001efa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d1c8      	bne.n	8001e8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d068      	beq.n	8002002 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2210      	movs	r2, #16
 8001f36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f38:	e049      	b.n	8001fce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d045      	beq.n	8001fce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f42:	f7ff fa8d 	bl	8001460 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d302      	bcc.n	8001f58 <I2C_IsErrorOccurred+0x54>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d13a      	bne.n	8001fce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7a:	d121      	bne.n	8001fc0 <I2C_IsErrorOccurred+0xbc>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f82:	d01d      	beq.n	8001fc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d01a      	beq.n	8001fc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f9a:	f7ff fa61 	bl	8001460 <HAL_GetTick>
 8001f9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa0:	e00e      	b.n	8001fc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fa2:	f7ff fa5d 	bl	8001460 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b19      	cmp	r3, #25
 8001fae:	d907      	bls.n	8001fc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f043 0320 	orr.w	r3, r3, #32
 8001fb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001fbe:	e006      	b.n	8001fce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d1e9      	bne.n	8001fa2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d003      	beq.n	8001fe4 <I2C_IsErrorOccurred+0xe0>
 8001fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0aa      	beq.n	8001f3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d103      	bne.n	8001ff4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002024:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002046:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00b      	beq.n	8002070 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002068:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01c      	beq.n	80020b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff fe45 	bl	8001d08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <I2C_IsErrorOccurred+0x1bc>)
 800208a:	400b      	ands	r3, r1
 800208c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80020b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	fe00e800 	.word	0xfe00e800

080020c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	817b      	strh	r3, [r7, #10]
 80020d2:	4613      	mov	r3, r2
 80020d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020d6:	897b      	ldrh	r3, [r7, #10]
 80020d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020dc:	7a7b      	ldrb	r3, [r7, #9]
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	0d5b      	lsrs	r3, r3, #21
 80020fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <I2C_TransferConfig+0x60>)
 8002104:	430b      	orrs	r3, r1
 8002106:	43db      	mvns	r3, r3
 8002108:	ea02 0103 	and.w	r1, r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002116:	bf00      	nop
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	03ff63ff 	.word	0x03ff63ff

08002128 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b20      	cmp	r3, #32
 800213c:	d138      	bne.n	80021b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002148:	2302      	movs	r3, #2
 800214a:	e032      	b.n	80021b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800217a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d139      	bne.n	8002248 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021de:	2302      	movs	r3, #2
 80021e0:	e033      	b.n	800224a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2224      	movs	r2, #36	; 0x24
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002210:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800225e:	af00      	add	r7, sp, #0
 8002260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002264:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002268:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800226a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	f001 b83a 	b.w	80032f2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002282:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 816f 	beq.w	8002572 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002294:	4bb5      	ldr	r3, [pc, #724]	; (800256c <HAL_RCC_OscConfig+0x314>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b04      	cmp	r3, #4
 800229e:	d00c      	beq.n	80022ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a0:	4bb2      	ldr	r3, [pc, #712]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d15c      	bne.n	8002366 <HAL_RCC_OscConfig+0x10e>
 80022ac:	4baf      	ldr	r3, [pc, #700]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d155      	bne.n	8002366 <HAL_RCC_OscConfig+0x10e>
 80022ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d102      	bne.n	80022ec <HAL_RCC_OscConfig+0x94>
 80022e6:	4ba1      	ldr	r3, [pc, #644]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	e015      	b.n	8002318 <HAL_RCC_OscConfig+0xc0>
 80022ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002304:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002308:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002314:	4b95      	ldr	r3, [pc, #596]	; (800256c <HAL_RCC_OscConfig+0x314>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800231c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002320:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002324:	fa92 f2a2 	rbit	r2, r2
 8002328:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800232c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002330:	fab2 f282 	clz	r2, r2
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	f042 0220 	orr.w	r2, r2, #32
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f002 021f 	and.w	r2, r2, #31
 8002340:	2101      	movs	r1, #1
 8002342:	fa01 f202 	lsl.w	r2, r1, r2
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8111 	beq.w	8002570 <HAL_RCC_OscConfig+0x318>
 800234e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002352:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 8108 	bne.w	8002570 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	f000 bfc6 	b.w	80032f2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002366:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x12e>
 8002378:	4b7c      	ldr	r3, [pc, #496]	; (800256c <HAL_RCC_OscConfig+0x314>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a7b      	ldr	r2, [pc, #492]	; (800256c <HAL_RCC_OscConfig+0x314>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e036      	b.n	80023f4 <HAL_RCC_OscConfig+0x19c>
 8002386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x158>
 8002396:	4b75      	ldr	r3, [pc, #468]	; (800256c <HAL_RCC_OscConfig+0x314>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a74      	ldr	r2, [pc, #464]	; (800256c <HAL_RCC_OscConfig+0x314>)
 800239c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b72      	ldr	r3, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a71      	ldr	r2, [pc, #452]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e021      	b.n	80023f4 <HAL_RCC_OscConfig+0x19c>
 80023b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x184>
 80023c2:	4b6a      	ldr	r3, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a69      	ldr	r2, [pc, #420]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b67      	ldr	r3, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0x19c>
 80023dc:	4b63      	ldr	r3, [pc, #396]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a62      	ldr	r2, [pc, #392]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b60      	ldr	r3, [pc, #384]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5f      	ldr	r2, [pc, #380]	; (800256c <HAL_RCC_OscConfig+0x314>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d059      	beq.n	80024b8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff f82c 	bl	8001460 <HAL_GetTick>
 8002408:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240e:	f7ff f827 	bl	8001460 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d902      	bls.n	8002424 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	f000 bf67 	b.w	80032f2 <HAL_RCC_OscConfig+0x109a>
 8002424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002428:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002438:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d102      	bne.n	8002456 <HAL_RCC_OscConfig+0x1fe>
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCC_OscConfig+0x314>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x22a>
 8002456:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800246a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800246e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002472:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800247e:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x314>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002486:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800248a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800248e:	fa92 f2a2 	rbit	r2, r2
 8002492:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002496:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	f042 0220 	orr.w	r2, r2, #32
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f002 021f 	and.w	r2, r2, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ab      	beq.n	800240e <HAL_RCC_OscConfig+0x1b6>
 80024b6:	e05c      	b.n	8002572 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe ffd2 	bl	8001460 <HAL_GetTick>
 80024bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c2:	f7fe ffcd 	bl	8001460 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d902      	bls.n	80024d8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	f000 bf0d 	b.w	80032f2 <HAL_RCC_OscConfig+0x109a>
 80024d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024dc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80024ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d102      	bne.n	800250a <HAL_RCC_OscConfig+0x2b2>
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_OscConfig+0x314>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x2de>
 800250a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800251e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002522:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002526:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_RCC_OscConfig+0x314>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800253a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800253e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002542:	fa92 f2a2 	rbit	r2, r2
 8002546:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800254a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0220 	orr.w	r2, r2, #32
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1ab      	bne.n	80024c2 <HAL_RCC_OscConfig+0x26a>
 800256a:	e002      	b.n	8002572 <HAL_RCC_OscConfig+0x31a>
 800256c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002576:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 817f 	beq.w	8002886 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002588:	4ba7      	ldr	r3, [pc, #668]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002594:	4ba4      	ldr	r3, [pc, #656]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d173      	bne.n	8002688 <HAL_RCC_OscConfig+0x430>
 80025a0:	4ba1      	ldr	r3, [pc, #644]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80025a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ac:	d16c      	bne.n	8002688 <HAL_RCC_OscConfig+0x430>
 80025ae:	2302      	movs	r3, #2
 80025b0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80025c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d102      	bne.n	80025de <HAL_RCC_OscConfig+0x386>
 80025d8:	4b93      	ldr	r3, [pc, #588]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	e013      	b.n	8002606 <HAL_RCC_OscConfig+0x3ae>
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80025f0:	2302      	movs	r3, #2
 80025f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002602:	4b89      	ldr	r3, [pc, #548]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2202      	movs	r2, #2
 8002608:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800260c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002618:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f042 0220 	orr.w	r2, r2, #32
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f002 021f 	and.w	r2, r2, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCC_OscConfig+0x3f6>
 8002638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d002      	beq.n	800264e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	f000 be52 	b.w	80032f2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	4b76      	ldr	r3, [pc, #472]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	21f8      	movs	r1, #248	; 0xf8
 8002664:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800266c:	fa91 f1a1 	rbit	r1, r1
 8002670:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002674:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002678:	fab1 f181 	clz	r1, r1
 800267c:	b2c9      	uxtb	r1, r1
 800267e:	408b      	lsls	r3, r1
 8002680:	4969      	ldr	r1, [pc, #420]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e0fe      	b.n	8002886 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8088 	beq.w	80027aa <HAL_RCC_OscConfig+0x552>
 800269a:	2301      	movs	r3, #1
 800269c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80026ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	461a      	mov	r2, r3
 80026c2:	2301      	movs	r3, #1
 80026c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fecb 	bl	8001460 <HAL_GetTick>
 80026ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe fec6 	bl	8001460 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d902      	bls.n	80026e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	f000 be06 	b.w	80032f2 <HAL_RCC_OscConfig+0x109a>
 80026e6:	2302      	movs	r3, #2
 80026e8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80026f8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d102      	bne.n	8002716 <HAL_RCC_OscConfig+0x4be>
 8002710:	4b45      	ldr	r3, [pc, #276]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	e013      	b.n	800273e <HAL_RCC_OscConfig+0x4e6>
 8002716:	2302      	movs	r3, #2
 8002718:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800272e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2202      	movs	r2, #2
 8002740:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002744:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002748:	fa92 f2a2 	rbit	r2, r2
 800274c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002750:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002754:	fab2 f282 	clz	r2, r2
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f042 0220 	orr.w	r2, r2, #32
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f002 021f 	and.w	r2, r2, #31
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f202 	lsl.w	r2, r1, r2
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0af      	beq.n	80026d0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	21f8      	movs	r1, #248	; 0xf8
 8002786:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800278e:	fa91 f1a1 	rbit	r1, r1
 8002792:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002796:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800279a:	fab1 f181 	clz	r1, r1
 800279e:	b2c9      	uxtb	r1, r1
 80027a0:	408b      	lsls	r3, r1
 80027a2:	4921      	ldr	r1, [pc, #132]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e06d      	b.n	8002886 <HAL_RCC_OscConfig+0x62e>
 80027aa:	2301      	movs	r3, #1
 80027ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80027bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	461a      	mov	r2, r3
 80027d2:	2300      	movs	r3, #0
 80027d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe fe43 	bl	8001460 <HAL_GetTick>
 80027da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e0:	f7fe fe3e 	bl	8001460 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d902      	bls.n	80027f6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f000 bd7e 	b.w	80032f2 <HAL_RCC_OscConfig+0x109a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002808:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x5d4>
 8002820:	4b01      	ldr	r3, [pc, #4]	; (8002828 <HAL_RCC_OscConfig+0x5d0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	e016      	b.n	8002854 <HAL_RCC_OscConfig+0x5fc>
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	2302      	movs	r3, #2
 800282e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800283e:	2302      	movs	r3, #2
 8002840:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002844:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002850:	4bbf      	ldr	r3, [pc, #764]	; (8002b50 <HAL_RCC_OscConfig+0x8f8>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2202      	movs	r2, #2
 8002856:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800285a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800285e:	fa92 f2a2 	rbit	r2, r2
 8002862:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002866:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ac      	bne.n	80027e0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8113 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d07c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x74e>
 80028ac:	2301      	movs	r3, #1
 80028ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80028be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	4ba2      	ldr	r3, [pc, #648]	; (8002b54 <HAL_RCC_OscConfig+0x8fc>)
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	461a      	mov	r2, r3
 80028d2:	2301      	movs	r3, #1
 80028d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fdc3 	bl	8001460 <HAL_GetTick>
 80028da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe fdbe 	bl	8001460 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d902      	bls.n	80028f6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	f000 bcfe 	b.w	80032f2 <HAL_RCC_OscConfig+0x109a>
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002908:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002916:	2202      	movs	r2, #2
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002936:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800293a:	2202      	movs	r2, #2
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002942:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	fa93 f2a3 	rbit	r2, r3
 800294c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002950:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002954:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	4b7e      	ldr	r3, [pc, #504]	; (8002b50 <HAL_RCC_OscConfig+0x8f8>)
 8002958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002962:	2102      	movs	r1, #2
 8002964:	6019      	str	r1, [r3, #0]
 8002966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f1a3 	rbit	r1, r3
 8002974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002978:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800297c:	6019      	str	r1, [r3, #0]
  return result;
 800297e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002982:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d09d      	beq.n	80028e0 <HAL_RCC_OscConfig+0x688>
 80029a4:	e08d      	b.n	8002ac2 <HAL_RCC_OscConfig+0x86a>
 80029a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	fa93 f2a3 	rbit	r2, r3
 80029c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029c8:	601a      	str	r2, [r3, #0]
  return result;
 80029ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029d2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <HAL_RCC_OscConfig+0x8fc>)
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	461a      	mov	r2, r3
 80029e4:	2300      	movs	r3, #0
 80029e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7fe fd3a 	bl	8001460 <HAL_GetTick>
 80029ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f2:	f7fe fd35 	bl	8001460 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	f000 bc75 	b.w	80032f2 <HAL_RCC_OscConfig+0x109a>
 8002a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a10:	2202      	movs	r2, #2
 8002a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f2a3 	rbit	r2, r3
 8002a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a34:	2202      	movs	r2, #2
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fa93 f2a3 	rbit	r2, r3
 8002a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a58:	2202      	movs	r2, #2
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_RCC_OscConfig+0x8f8>)
 8002a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a80:	2102      	movs	r1, #2
 8002a82:	6019      	str	r1, [r3, #0]
 8002a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f1a3 	rbit	r1, r3
 8002a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a96:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a9a:	6019      	str	r1, [r3, #0]
  return result;
 8002a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d197      	bne.n	80029f2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 81a5 	beq.w	8002e22 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_RCC_OscConfig+0x8f8>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d116      	bne.n	8002b18 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_OscConfig+0x8f8>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <HAL_RCC_OscConfig+0x8f8>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	61d3      	str	r3, [r2, #28]
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_RCC_OscConfig+0x8f8>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_RCC_OscConfig+0x900>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d121      	bne.n	8002b68 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_RCC_OscConfig+0x900>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_RCC_OscConfig+0x900>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b30:	f7fe fc96 	bl	8001460 <HAL_GetTick>
 8002b34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	e010      	b.n	8002b5c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7fe fc91 	bl	8001460 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d908      	bls.n	8002b5c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e3d1      	b.n	80032f2 <HAL_RCC_OscConfig+0x109a>
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	10908120 	.word	0x10908120
 8002b58:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b8d      	ldr	r3, [pc, #564]	; (8002d94 <HAL_RCC_OscConfig+0xb3c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0e8      	beq.n	8002b3a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d106      	bne.n	8002b86 <HAL_RCC_OscConfig+0x92e>
 8002b78:	4b87      	ldr	r3, [pc, #540]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a86      	ldr	r2, [pc, #536]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	e035      	b.n	8002bf2 <HAL_RCC_OscConfig+0x99a>
 8002b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x958>
 8002b96:	4b80      	ldr	r3, [pc, #512]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	4a7f      	ldr	r2, [pc, #508]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	6213      	str	r3, [r2, #32]
 8002ba2:	4b7d      	ldr	r3, [pc, #500]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	4a7c      	ldr	r2, [pc, #496]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002ba8:	f023 0304 	bic.w	r3, r3, #4
 8002bac:	6213      	str	r3, [r2, #32]
 8002bae:	e020      	b.n	8002bf2 <HAL_RCC_OscConfig+0x99a>
 8002bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCC_OscConfig+0x982>
 8002bc0:	4b75      	ldr	r3, [pc, #468]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4a74      	ldr	r2, [pc, #464]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	6213      	str	r3, [r2, #32]
 8002bcc:	4b72      	ldr	r3, [pc, #456]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a71      	ldr	r2, [pc, #452]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	e00b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x99a>
 8002bda:	4b6f      	ldr	r3, [pc, #444]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a6e      	ldr	r2, [pc, #440]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	4b6c      	ldr	r3, [pc, #432]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a6b      	ldr	r2, [pc, #428]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8081 	beq.w	8002d06 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fc2c 	bl	8001460 <HAL_GetTick>
 8002c08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	e00b      	b.n	8002c26 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fc27 	bl	8001460 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e365      	b.n	80032f2 <HAL_RCC_OscConfig+0x109a>
 8002c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c2e:	2202      	movs	r2, #2
 8002c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c36:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	fa93 f2a3 	rbit	r2, r3
 8002c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c4e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c52:	2202      	movs	r2, #2
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c5a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	fa93 f2a3 	rbit	r2, r3
 8002c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c68:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c6c:	601a      	str	r2, [r3, #0]
  return result;
 8002c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c72:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f043 0302 	orr.w	r3, r3, #2
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCC_OscConfig+0xa3a>
 8002c8c:	4b42      	ldr	r3, [pc, #264]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	e013      	b.n	8002cba <HAL_RCC_OscConfig+0xa62>
 8002c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c96:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	4b38      	ldr	r3, [pc, #224]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cbe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	6011      	str	r1, [r2, #0]
 8002cc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	fa92 f1a2 	rbit	r1, r2
 8002cd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cd8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002cdc:	6011      	str	r1, [r2, #0]
  return result;
 8002cde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ce2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	fab2 f282 	clz	r2, r2
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f002 021f 	and.w	r2, r2, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d084      	beq.n	8002c0e <HAL_RCC_OscConfig+0x9b6>
 8002d04:	e083      	b.n	8002e0e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7fe fbab 	bl	8001460 <HAL_GetTick>
 8002d0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fe fba6 	bl	8001460 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e2e4      	b.n	80032f2 <HAL_RCC_OscConfig+0x109a>
 8002d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d2c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d30:	2202      	movs	r2, #2
 8002d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d38:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d50:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d54:	2202      	movs	r2, #2
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d6e:	601a      	str	r2, [r3, #0]
  return result;
 8002d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d74:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d106      	bne.n	8002d9c <HAL_RCC_OscConfig+0xb44>
 8002d8e:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <HAL_RCC_OscConfig+0xb40>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	e017      	b.n	8002dc4 <HAL_RCC_OscConfig+0xb6c>
 8002d94:	40007000 	.word	0x40007000
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002da4:	2202      	movs	r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dba:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4bb3      	ldr	r3, [pc, #716]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dc8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002dcc:	2102      	movs	r1, #2
 8002dce:	6011      	str	r1, [r2, #0]
 8002dd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dd4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	fa92 f1a2 	rbit	r1, r2
 8002dde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002de2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002de6:	6011      	str	r1, [r2, #0]
  return result;
 8002de8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dec:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	fab2 f282 	clz	r2, r2
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f002 021f 	and.w	r2, r2, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d180      	bne.n	8002d10 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e0e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b9e      	ldr	r3, [pc, #632]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a9d      	ldr	r2, [pc, #628]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 825e 	beq.w	80032f0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	f000 821f 	beq.w	8003280 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	f040 8170 	bne.w	8003134 <HAL_RCC_OscConfig+0xedc>
 8002e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e58:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e66:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	fa93 f2a3 	rbit	r2, r3
 8002e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e78:	601a      	str	r2, [r3, #0]
  return result;
 8002e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e82:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	461a      	mov	r2, r3
 8002e96:	2300      	movs	r3, #0
 8002e98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fae1 	bl	8001460 <HAL_GetTick>
 8002e9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea2:	e009      	b.n	8002eb8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe fadc 	bl	8001460 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e21c      	b.n	80032f2 <HAL_RCC_OscConfig+0x109a>
 8002eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ebc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	fa93 f2a3 	rbit	r2, r3
 8002ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002edc:	601a      	str	r2, [r3, #0]
  return result;
 8002ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ee6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_OscConfig+0xcaa>
 8002efc:	4b64      	ldr	r3, [pc, #400]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	e027      	b.n	8002f52 <HAL_RCC_OscConfig+0xcfa>
 8002f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f06:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f14:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f22:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fa93 f2a3 	rbit	r2, r3
 8002f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f48:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f56:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f5a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f5e:	6011      	str	r1, [r2, #0]
 8002f60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f64:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	fa92 f1a2 	rbit	r1, r2
 8002f6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f72:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002f76:	6011      	str	r1, [r2, #0]
  return result;
 8002f78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f7c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	fab2 f282 	clz	r2, r2
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f042 0220 	orr.w	r2, r2, #32
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	f002 021f 	and.w	r2, r2, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d182      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9e:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f023 020f 	bic.w	r2, r3, #15
 8002fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002faa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	4937      	ldr	r1, [pc, #220]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002fb8:	4b35      	ldr	r3, [pc, #212]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a19      	ldr	r1, [r3, #32]
 8002fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	492d      	ldr	r1, [pc, #180]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002fe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003000:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003004:	601a      	str	r2, [r3, #0]
  return result;
 8003006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800300a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800300e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800301a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	461a      	mov	r2, r3
 8003022:	2301      	movs	r3, #1
 8003024:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe fa1b 	bl	8001460 <HAL_GetTick>
 800302a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800302e:	e009      	b.n	8003044 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fa16 	bl	8001460 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e156      	b.n	80032f2 <HAL_RCC_OscConfig+0x109a>
 8003044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003048:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800304c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003056:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	fa93 f2a3 	rbit	r2, r3
 8003060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003064:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003068:	601a      	str	r2, [r3, #0]
  return result;
 800306a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003072:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0xe3c>
 8003088:	4b01      	ldr	r3, [pc, #4]	; (8003090 <HAL_RCC_OscConfig+0xe38>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	e02a      	b.n	80030e4 <HAL_RCC_OscConfig+0xe8c>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003098:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800309c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80030c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030cc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030da:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	4b86      	ldr	r3, [pc, #536]	; (80032fc <HAL_RCC_OscConfig+0x10a4>)
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030e8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030f0:	6011      	str	r1, [r2, #0]
 80030f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	fa92 f1a2 	rbit	r1, r2
 8003100:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003104:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003108:	6011      	str	r1, [r2, #0]
  return result;
 800310a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800310e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	f43f af7f 	beq.w	8003030 <HAL_RCC_OscConfig+0xdd8>
 8003132:	e0dd      	b.n	80032f0 <HAL_RCC_OscConfig+0x1098>
 8003134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003138:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800313c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003146:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f2a3 	rbit	r2, r3
 8003150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003154:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003158:	601a      	str	r2, [r3, #0]
  return result;
 800315a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003162:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800316e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	461a      	mov	r2, r3
 8003176:	2300      	movs	r3, #0
 8003178:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe f971 	bl	8001460 <HAL_GetTick>
 800317e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003182:	e009      	b.n	8003198 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe f96c 	bl	8001460 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0ac      	b.n	80032f2 <HAL_RCC_OscConfig+0x109a>
 8003198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	fa93 f2a3 	rbit	r2, r3
 80031b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80031bc:	601a      	str	r2, [r3, #0]
  return result;
 80031be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80031c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d102      	bne.n	80031e2 <HAL_RCC_OscConfig+0xf8a>
 80031dc:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_OscConfig+0x10a4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	e027      	b.n	8003232 <HAL_RCC_OscConfig+0xfda>
 80031e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80031ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	fa93 f2a3 	rbit	r2, r3
 80031fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003202:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800320c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	fa93 f2a3 	rbit	r2, r3
 8003224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003228:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	4b33      	ldr	r3, [pc, #204]	; (80032fc <HAL_RCC_OscConfig+0x10a4>)
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003236:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800323a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800323e:	6011      	str	r1, [r2, #0]
 8003240:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003244:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	fa92 f1a2 	rbit	r1, r2
 800324e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003252:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003256:	6011      	str	r1, [r2, #0]
  return result;
 8003258:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800325c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	fab2 f282 	clz	r2, r2
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	f042 0220 	orr.w	r2, r2, #32
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	f002 021f 	and.w	r2, r2, #31
 8003272:	2101      	movs	r1, #1
 8003274:	fa01 f202 	lsl.w	r2, r1, r2
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d182      	bne.n	8003184 <HAL_RCC_OscConfig+0xf2c>
 800327e:	e037      	b.n	80032f0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e02e      	b.n	80032f2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_OscConfig+0x10a4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_RCC_OscConfig+0x10a4>)
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80032a8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80032ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d117      	bne.n	80032ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80032bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80032c0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d10b      	bne.n	80032ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80032d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000

08003300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b09e      	sub	sp, #120	; 0x78
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e162      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b90      	ldr	r3, [pc, #576]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d910      	bls.n	8003348 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b8d      	ldr	r3, [pc, #564]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 0207 	bic.w	r2, r3, #7
 800332e:	498b      	ldr	r1, [pc, #556]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b89      	ldr	r3, [pc, #548]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e14a      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b82      	ldr	r3, [pc, #520]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	497f      	ldr	r1, [pc, #508]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80dc 	beq.w	800352c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d13c      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xf6>
 800337c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003380:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xa6>
 80033a0:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	e00f      	b.n	80033c6 <HAL_RCC_ClockConfig+0xc6>
 80033a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	667b      	str	r3, [r7, #100]	; 0x64
 80033b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b8:	663b      	str	r3, [r7, #96]	; 0x60
 80033ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80033cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ce:	fa92 f2a2 	rbit	r2, r2
 80033d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80033d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033d6:	fab2 f282 	clz	r2, r2
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f042 0220 	orr.w	r2, r2, #32
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	f002 021f 	and.w	r2, r2, #31
 80033e6:	2101      	movs	r1, #1
 80033e8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d17b      	bne.n	80034ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0f3      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d13c      	bne.n	8003478 <HAL_RCC_ClockConfig+0x178>
 80033fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003402:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800340c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d102      	bne.n	8003428 <HAL_RCC_ClockConfig+0x128>
 8003422:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	e00f      	b.n	8003448 <HAL_RCC_ClockConfig+0x148>
 8003428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800342c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
 8003436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343a:	643b      	str	r3, [r7, #64]	; 0x40
 800343c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800344c:	63ba      	str	r2, [r7, #56]	; 0x38
 800344e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	f042 0220 	orr.w	r2, r2, #32
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	f002 021f 	and.w	r2, r2, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d13a      	bne.n	80034ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0b2      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
 8003478:	2302      	movs	r3, #2
 800347a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x1a0>
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e00d      	b.n	80034bc <HAL_RCC_ClockConfig+0x1bc>
 80034a0:	2302      	movs	r3, #2
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	2302      	movs	r3, #2
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2202      	movs	r2, #2
 80034be:	61ba      	str	r2, [r7, #24]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	fa92 f2a2 	rbit	r2, r2
 80034c6:	617a      	str	r2, [r7, #20]
  return result;
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f042 0220 	orr.w	r2, r2, #32
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f002 021f 	and.w	r2, r2, #31
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e079      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	491a      	ldr	r1, [pc, #104]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034fc:	f7fd ffb0 	bl	8001460 <HAL_GetTick>
 8003500:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	e00a      	b.n	800351a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7fd ffac 	bl	8001460 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e061      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 020c 	and.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	429a      	cmp	r2, r3
 800352a:	d1eb      	bne.n	8003504 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d214      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4906      	ldr	r1, [pc, #24]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e040      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
 800355c:	40022000 	.word	0x40022000
 8003560:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	491a      	ldr	r1, [pc, #104]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4912      	ldr	r1, [pc, #72]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035a2:	f000 f829 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4601      	mov	r1, r0
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b0:	22f0      	movs	r2, #240	; 0xf0
 80035b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	fa92 f2a2 	rbit	r2, r2
 80035ba:	60fa      	str	r2, [r7, #12]
  return result;
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	fab2 f282 	clz	r2, r2
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	40d3      	lsrs	r3, r2
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x2ec>)
 80035c8:	5cd3      	ldrb	r3, [r2, r3]
 80035ca:	fa21 f303 	lsr.w	r3, r1, r3
 80035ce:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <HAL_RCC_ClockConfig+0x2f0>)
 80035d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_RCC_ClockConfig+0x2f4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fefe 	bl	80013d8 <HAL_InitTick>
  
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3778      	adds	r7, #120	; 0x78
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08003c70 	.word	0x08003c70
 80035f0:	20000010 	.word	0x20000010
 80035f4:	20000014 	.word	0x20000014

080035f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b08b      	sub	sp, #44	; 0x2c
 80035fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003612:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x30>
 8003622:	2b08      	cmp	r3, #8
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x36>
 8003626:	e03f      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800362a:	623b      	str	r3, [r7, #32]
      break;
 800362c:	e03f      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003634:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003638:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	fa92 f2a2 	rbit	r2, r2
 8003640:	607a      	str	r2, [r7, #4]
  return result;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	fab2 f282 	clz	r2, r2
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	40d3      	lsrs	r3, r2
 800364c:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	220f      	movs	r2, #15
 800365c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	fa92 f2a2 	rbit	r2, r2
 8003664:	60fa      	str	r2, [r7, #12]
  return result;
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	fab2 f282 	clz	r2, r2
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	40d3      	lsrs	r3, r2
 8003670:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003672:	5cd3      	ldrb	r3, [r2, r3]
 8003674:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003680:	4a0f      	ldr	r2, [pc, #60]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	e007      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003692:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	fbb2 f2f3 	udiv	r2, r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	623b      	str	r3, [r7, #32]
      break;
 80036a6:	e002      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036aa:	623b      	str	r3, [r7, #32]
      break;
 80036ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ae:	6a3b      	ldr	r3, [r7, #32]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	372c      	adds	r7, #44	; 0x2c
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40021000 	.word	0x40021000
 80036c0:	007a1200 	.word	0x007a1200
 80036c4:	08003c80 	.word	0x08003c80
 80036c8:	08003c90 	.word	0x08003c90

080036cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000010 	.word	0x20000010

080036e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b092      	sub	sp, #72	; 0x48
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80d4 	beq.w	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003708:	4b4e      	ldr	r3, [pc, #312]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10e      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003714:	4b4b      	ldr	r3, [pc, #300]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4a4a      	ldr	r2, [pc, #296]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371e:	61d3      	str	r3, [r2, #28]
 8003720:	4b48      	ldr	r3, [pc, #288]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003732:	4b45      	ldr	r3, [pc, #276]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d118      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373e:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a41      	ldr	r2, [pc, #260]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374a:	f7fd fe89 	bl	8001460 <HAL_GetTick>
 800374e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	e008      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003752:	f7fd fe85 	bl	8001460 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b64      	cmp	r3, #100	; 0x64
 800375e:	d901      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e1d6      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	4b38      	ldr	r3, [pc, #224]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8084 	beq.w	800388a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800378c:	429a      	cmp	r2, r3
 800378e:	d07c      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	461a      	mov	r2, r3
 80037ba:	2301      	movs	r3, #1
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	fa93 f3a3 	rbit	r3, r3
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	461a      	mov	r2, r3
 80037de:	2300      	movs	r3, #0
 80037e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037e2:	4a18      	ldr	r2, [pc, #96]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04b      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fd fe35 	bl	8001460 <HAL_GetTick>
 80037f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f8:	e00a      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f7fd fe31 	bl	8001460 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e180      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003810:	2302      	movs	r3, #2
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
 800381c:	2302      	movs	r3, #2
 800381e:	623b      	str	r3, [r7, #32]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	61fb      	str	r3, [r7, #28]
  return result;
 8003828:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d108      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800383e:	4b01      	ldr	r3, [pc, #4]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	e00d      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
 800384c:	10908100 	.word	0x10908100
 8003850:	2302      	movs	r3, #2
 8003852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	4b9a      	ldr	r3, [pc, #616]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	2202      	movs	r2, #2
 8003862:	613a      	str	r2, [r7, #16]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	fa92 f2a2 	rbit	r2, r2
 800386a:	60fa      	str	r2, [r7, #12]
  return result;
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	fab2 f282 	clz	r2, r2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f002 021f 	and.w	r2, r2, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0b7      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800388a:	4b8f      	ldr	r3, [pc, #572]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	498c      	ldr	r1, [pc, #560]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800389c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b88      	ldr	r3, [pc, #544]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038bc:	4b82      	ldr	r3, [pc, #520]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f023 0203 	bic.w	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	497f      	ldr	r1, [pc, #508]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038da:	4b7b      	ldr	r3, [pc, #492]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4978      	ldr	r1, [pc, #480]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038f8:	4b73      	ldr	r3, [pc, #460]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	4970      	ldr	r1, [pc, #448]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003916:	4b6c      	ldr	r3, [pc, #432]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f023 0210 	bic.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4969      	ldr	r1, [pc, #420]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003934:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	4961      	ldr	r1, [pc, #388]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003952:	4b5d      	ldr	r3, [pc, #372]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f023 0220 	bic.w	r2, r3, #32
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	495a      	ldr	r1, [pc, #360]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003970:	4b55      	ldr	r3, [pc, #340]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	4952      	ldr	r1, [pc, #328]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800398e:	4b4e      	ldr	r3, [pc, #312]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	494b      	ldr	r1, [pc, #300]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ac:	4b46      	ldr	r3, [pc, #280]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	4943      	ldr	r1, [pc, #268]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039ca:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	493c      	ldr	r1, [pc, #240]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039e8:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	4934      	ldr	r1, [pc, #208]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	492d      	ldr	r1, [pc, #180]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a30:	4925      	ldr	r1, [pc, #148]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	491e      	ldr	r1, [pc, #120]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	4916      	ldr	r1, [pc, #88]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	490f      	ldr	r1, [pc, #60]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	4907      	ldr	r1, [pc, #28]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003aba:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	4913      	ldr	r1, [pc, #76]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aec:	490b      	ldr	r1, [pc, #44]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003afe:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0a:	4904      	ldr	r1, [pc, #16]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3748      	adds	r7, #72	; 0x48
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000

08003b20 <__itoa>:
 8003b20:	1e93      	subs	r3, r2, #2
 8003b22:	2b22      	cmp	r3, #34	; 0x22
 8003b24:	b510      	push	{r4, lr}
 8003b26:	460c      	mov	r4, r1
 8003b28:	d904      	bls.n	8003b34 <__itoa+0x14>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	700b      	strb	r3, [r1, #0]
 8003b2e:	461c      	mov	r4, r3
 8003b30:	4620      	mov	r0, r4
 8003b32:	bd10      	pop	{r4, pc}
 8003b34:	2a0a      	cmp	r2, #10
 8003b36:	d109      	bne.n	8003b4c <__itoa+0x2c>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	da07      	bge.n	8003b4c <__itoa+0x2c>
 8003b3c:	232d      	movs	r3, #45	; 0x2d
 8003b3e:	700b      	strb	r3, [r1, #0]
 8003b40:	4240      	negs	r0, r0
 8003b42:	2101      	movs	r1, #1
 8003b44:	4421      	add	r1, r4
 8003b46:	f000 f805 	bl	8003b54 <__utoa>
 8003b4a:	e7f1      	b.n	8003b30 <__itoa+0x10>
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	e7f9      	b.n	8003b44 <__itoa+0x24>

08003b50 <itoa>:
 8003b50:	f7ff bfe6 	b.w	8003b20 <__itoa>

08003b54 <__utoa>:
 8003b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b56:	4c1f      	ldr	r4, [pc, #124]	; (8003bd4 <__utoa+0x80>)
 8003b58:	b08b      	sub	sp, #44	; 0x2c
 8003b5a:	4605      	mov	r5, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	466e      	mov	r6, sp
 8003b60:	f104 0c20 	add.w	ip, r4, #32
 8003b64:	6820      	ldr	r0, [r4, #0]
 8003b66:	6861      	ldr	r1, [r4, #4]
 8003b68:	4637      	mov	r7, r6
 8003b6a:	c703      	stmia	r7!, {r0, r1}
 8003b6c:	3408      	adds	r4, #8
 8003b6e:	4564      	cmp	r4, ip
 8003b70:	463e      	mov	r6, r7
 8003b72:	d1f7      	bne.n	8003b64 <__utoa+0x10>
 8003b74:	7921      	ldrb	r1, [r4, #4]
 8003b76:	7139      	strb	r1, [r7, #4]
 8003b78:	1e91      	subs	r1, r2, #2
 8003b7a:	6820      	ldr	r0, [r4, #0]
 8003b7c:	6038      	str	r0, [r7, #0]
 8003b7e:	2922      	cmp	r1, #34	; 0x22
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	d904      	bls.n	8003b90 <__utoa+0x3c>
 8003b86:	7019      	strb	r1, [r3, #0]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	b00b      	add	sp, #44	; 0x2c
 8003b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b90:	1e58      	subs	r0, r3, #1
 8003b92:	4684      	mov	ip, r0
 8003b94:	fbb5 f7f2 	udiv	r7, r5, r2
 8003b98:	fb02 5617 	mls	r6, r2, r7, r5
 8003b9c:	3628      	adds	r6, #40	; 0x28
 8003b9e:	446e      	add	r6, sp
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003ba6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003baa:	462e      	mov	r6, r5
 8003bac:	42b2      	cmp	r2, r6
 8003bae:	f101 0101 	add.w	r1, r1, #1
 8003bb2:	463d      	mov	r5, r7
 8003bb4:	d9ee      	bls.n	8003b94 <__utoa+0x40>
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	545a      	strb	r2, [r3, r1]
 8003bba:	1919      	adds	r1, r3, r4
 8003bbc:	1aa5      	subs	r5, r4, r2
 8003bbe:	42aa      	cmp	r2, r5
 8003bc0:	dae3      	bge.n	8003b8a <__utoa+0x36>
 8003bc2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003bc6:	780e      	ldrb	r6, [r1, #0]
 8003bc8:	7006      	strb	r6, [r0, #0]
 8003bca:	3201      	adds	r2, #1
 8003bcc:	f801 5901 	strb.w	r5, [r1], #-1
 8003bd0:	e7f4      	b.n	8003bbc <__utoa+0x68>
 8003bd2:	bf00      	nop
 8003bd4:	08003ca0 	.word	0x08003ca0

08003bd8 <memset>:
 8003bd8:	4402      	add	r2, r0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d100      	bne.n	8003be2 <memset+0xa>
 8003be0:	4770      	bx	lr
 8003be2:	f803 1b01 	strb.w	r1, [r3], #1
 8003be6:	e7f9      	b.n	8003bdc <memset+0x4>

08003be8 <__libc_init_array>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4d0d      	ldr	r5, [pc, #52]	; (8003c20 <__libc_init_array+0x38>)
 8003bec:	4c0d      	ldr	r4, [pc, #52]	; (8003c24 <__libc_init_array+0x3c>)
 8003bee:	1b64      	subs	r4, r4, r5
 8003bf0:	10a4      	asrs	r4, r4, #2
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	42a6      	cmp	r6, r4
 8003bf6:	d109      	bne.n	8003c0c <__libc_init_array+0x24>
 8003bf8:	4d0b      	ldr	r5, [pc, #44]	; (8003c28 <__libc_init_array+0x40>)
 8003bfa:	4c0c      	ldr	r4, [pc, #48]	; (8003c2c <__libc_init_array+0x44>)
 8003bfc:	f000 f818 	bl	8003c30 <_init>
 8003c00:	1b64      	subs	r4, r4, r5
 8003c02:	10a4      	asrs	r4, r4, #2
 8003c04:	2600      	movs	r6, #0
 8003c06:	42a6      	cmp	r6, r4
 8003c08:	d105      	bne.n	8003c16 <__libc_init_array+0x2e>
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c10:	4798      	blx	r3
 8003c12:	3601      	adds	r6, #1
 8003c14:	e7ee      	b.n	8003bf4 <__libc_init_array+0xc>
 8003c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1a:	4798      	blx	r3
 8003c1c:	3601      	adds	r6, #1
 8003c1e:	e7f2      	b.n	8003c06 <__libc_init_array+0x1e>
 8003c20:	08003cc8 	.word	0x08003cc8
 8003c24:	08003cc8 	.word	0x08003cc8
 8003c28:	08003cc8 	.word	0x08003cc8
 8003c2c:	08003ccc 	.word	0x08003ccc

08003c30 <_init>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	bf00      	nop
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr

08003c3c <_fini>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	bf00      	nop
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr
