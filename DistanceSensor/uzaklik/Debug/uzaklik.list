
uzaklik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003708  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038d8  080038d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d8  080038d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000904d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001595  00000000  00000000  000290cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000688  00000000  00000000  0002a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004fc  00000000  00000000  0002acf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f028  00000000  00000000  0002b1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009eea  00000000  00000000  0004a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc493  00000000  00000000  000540fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001a34  00000000  00000000  00110594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00111fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003888 	.word	0x08003888

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003888 	.word	0x08003888

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <DWT_Delay_Init+0x58>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <DWT_Delay_Init+0x58>)
 80009be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009c2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <DWT_Delay_Init+0x58>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <DWT_Delay_Init+0x58>)
 80009ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ce:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009d6:	f023 0301 	bic.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80009ee:	bf00      	nop
     __ASM volatile ("NOP");
 80009f0:	bf00      	nop
  __ASM volatile ("NOP");
 80009f2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <DWT_Delay_Init+0x5c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80009fc:	2300      	movs	r3, #0
 80009fe:	e000      	b.n	8000a02 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000a00:	2301      	movs	r3, #1
  }
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000edf0 	.word	0xe000edf0
 8000a10:	e0001000 	.word	0xe0001000

08000a14 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <DWT_Delay_us+0x40>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000a22:	f001 ffd5 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <DWT_Delay_us+0x44>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	0c9b      	lsrs	r3, r3, #18
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	fb02 f303 	mul.w	r3, r2, r3
 8000a36:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000a38:	bf00      	nop
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <DWT_Delay_us+0x40>)
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	1ad2      	subs	r2, r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d3f8      	bcc.n	8000a3a <DWT_Delay_us+0x26>
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e0001000 	.word	0xe0001000
 8000a58:	431bde83 	.word	0x431bde83

08000a5c <Read_HCSR04>:
/* USER CODE BEGIN 0 */
uint32_t sensor_time;


uint32_t Read_HCSR04()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	uint32_t local_time = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);		// pull the trig pin high
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f000 fd5c 	bl	800152c <HAL_GPIO_WritePin>
	DWT_Delay_us(10);										// wait for 10 us
 8000a74:	200a      	movs	r0, #10
 8000a76:	f7ff ffcd 	bl	8000a14 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);	// pull the trig pin low
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f000 fd52 	bl	800152c <HAL_GPIO_WritePin>

	// wait for the echo pin to go high

	while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)));
 8000a88:	bf00      	nop
 8000a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f000 fd33 	bl	80014fc <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0f6      	beq.n	8000a8a <Read_HCSR04+0x2e>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))				// while the pin is high
 8000a9c:	e005      	b.n	8000aaa <Read_HCSR04+0x4e>
	{
		local_time++;										// increment local time
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
		DWT_Delay_us(1);									// every 1 us
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff ffb5 	bl	8000a14 <DWT_Delay_us>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))				// while the pin is high
 8000aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f000 fd23 	bl	80014fc <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f0      	bne.n	8000a9e <Read_HCSR04+0x42>
	}

	return local_time * 2;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	005b      	lsls	r3, r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ace:	f000 fa3f 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad2:	f000 f861 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad6:	f000 f8ed 	bl	8000cb4 <MX_GPIO_Init>
  MX_UART4_Init();
 8000ada:	f000 f8bb 	bl	8000c54 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000ade:	f7ff ff69 	bl	80009b4 <DWT_Delay_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

      sensor_time = Read_HCSR04();			// get the high time
 8000ae2:	f7ff ffbb 	bl	8000a5c <Read_HCSR04>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <main+0xc0>)
 8000aea:	6013      	str	r3, [r2, #0]
	  	  distance = sensor_time * .034 / 2;	// user the formula to get the distance
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <main+0xc0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fcb3 	bl	800045c <__aeabi_ui2d>
 8000af6:	a322      	add	r3, pc, #136	; (adr r3, 8000b80 <main+0xb8>)
 8000af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afc:	f7ff fd28 	bl	8000550 <__aeabi_dmul>
 8000b00:	4602      	mov	r2, r0
 8000b02:	460b      	mov	r3, r1
 8000b04:	4610      	mov	r0, r2
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 0200 	mov.w	r2, #0
 8000b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b10:	f7ff fe48 	bl	80007a4 <__aeabi_ddiv>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	4610      	mov	r0, r2
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f7ff ff2a 	bl	8000974 <__aeabi_d2uiz>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <main+0xc4>)
 8000b26:	701a      	strb	r2, [r3, #0]


    if (distance<12){
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <main+0xc4>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b0b      	cmp	r3, #11
 8000b2e:	d803      	bhi.n	8000b38 <main+0x70>
    	wlevel[0]=0;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <main+0xc8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e01a      	b.n	8000b6e <main+0xa6>
    }
    else if (distance<16){
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <main+0xc4>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d803      	bhi.n	8000b48 <main+0x80>
    	wlevel[0]=1;
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <main+0xc8>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e012      	b.n	8000b6e <main+0xa6>
    }

    else if (distance<20){
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <main+0xc4>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b13      	cmp	r3, #19
 8000b4e:	d803      	bhi.n	8000b58 <main+0x90>
        	wlevel[0]=2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <main+0xc8>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e00a      	b.n	8000b6e <main+0xa6>
        }
    else if (distance<24){
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <main+0xc4>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b17      	cmp	r3, #23
 8000b5e:	d803      	bhi.n	8000b68 <main+0xa0>
        	wlevel[0]=3;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <main+0xc8>)
 8000b62:	2203      	movs	r2, #3
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e002      	b.n	8000b6e <main+0xa6>
        }
    else{
    	wlevel[0]=4;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <main+0xc8>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	701a      	strb	r2, [r3, #0]
    }

	  	HAL_StatusTypeDef status = HAL_UART_Transmit (&huart4,wlevel, sizeof (wlevel), 10);
 8000b6e:	230a      	movs	r3, #10
 8000b70:	2203      	movs	r2, #3
 8000b72:	4907      	ldr	r1, [pc, #28]	; (8000b90 <main+0xc8>)
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <main+0xcc>)
 8000b76:	f002 f9e7 	bl	8002f48 <HAL_UART_Transmit>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  {
 8000b7e:	e7b0      	b.n	8000ae2 <main+0x1a>
 8000b80:	b020c49c 	.word	0xb020c49c
 8000b84:	3fa16872 	.word	0x3fa16872
 8000b88:	200000b8 	.word	0x200000b8
 8000b8c:	200000b0 	.word	0x200000b0
 8000b90:	200000b4 	.word	0x200000b4
 8000b94:	20000028 	.word	0x20000028

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a6      	sub	sp, #152	; 0x98
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ba2:	2228      	movs	r2, #40	; 0x28
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fe41 	bl	800382e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2258      	movs	r2, #88	; 0x58
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 fe33 	bl	800382e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL11;
 8000be4:	f44f 1310 	mov.w	r3, #2359296	; 0x240000
 8000be8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fcb0 	bl	800155c <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c02:	f000 f8d1 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	230f      	movs	r3, #15
 8000c08:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fcee 	bl	8002604 <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c2e:	f000 f8bb 	bl	8000da8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c32:	2308      	movs	r3, #8
 8000c34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 ff17 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c48:	f000 f8ae 	bl	8000da8 <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3798      	adds	r7, #152	; 0x98
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_UART4_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <MX_UART4_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_UART4_Init+0x58>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_UART4_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_UART4_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_UART4_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_UART4_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_UART4_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_UART4_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_UART4_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_UART4_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_UART4_Init+0x58>)
 8000c98:	f002 f908 	bl	8002eac <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 f881 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000028 	.word	0x20000028
 8000cb0:	40004c00 	.word	0x40004c00

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a34      	ldr	r2, [pc, #208]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd4:	6153      	str	r3, [r2, #20]
 8000cd6:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a2e      	ldr	r2, [pc, #184]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	6153      	str	r3, [r2, #20]
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000d00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_GPIO_Init+0xec>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f000 fbfa 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f000 fa4a 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f000 fa3a 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d86:	2304      	movs	r3, #4
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000d92:	f000 fa29 	bl	80011e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000
 8000da4:	48000400 	.word	0x48000400

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x8>
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_MspInit+0x44>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_MspInit+0x44>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_MspInit+0x44>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_MspInit+0x44>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0x7c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d128      	bne.n	8000e70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_UART_MspInit+0x80>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <HAL_UART_MspInit+0x80>)
 8000e24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e28:	61d3      	str	r3, [r2, #28]
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0x80>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0x80>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_UART_MspInit+0x80>)
 8000e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_UART_MspInit+0x80>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000e60:	2305      	movs	r3, #5
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_UART_MspInit+0x84>)
 8000e6c:	f000 f9bc 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40004c00 	.word	0x40004c00
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48000800 	.word	0x48000800

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f884 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f00:	f7ff ffea 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f002 fc89 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f2e:	f7ff fdcb 	bl	8000ac8 <main>

08000f32 <LoopForever>:

LoopForever:
    b LoopForever
 8000f32:	e7fe      	b.n	8000f32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f40:	080038e0 	.word	0x080038e0
  ldr r2, =_sbss
 8000f44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f48:	200000c0 	.word	0x200000c0

08000f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_2_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x28>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x28>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f90d 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	200f      	movs	r0, #15
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f7ff ff22 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f917 	bl	80011ce <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f8ed 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000004 	.word	0x20000004

08000fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	200000bc 	.word	0x200000bc

08001004 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;  
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200000bc 	.word	0x200000bc

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff47 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5c 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb0 	bl	800113c <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e160      	b.n	80014ba <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8152 	beq.w	80014b4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x40>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	f003 0201 	and.w	r2, r3, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0203 	and.w	r2, r3, #3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80ac 	beq.w	80014b4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_GPIO_Init+0x2f0>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a5d      	ldr	r2, [pc, #372]	; (80014d8 <HAL_GPIO_Init+0x2f0>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <HAL_GPIO_Init+0x2f0>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001374:	4a59      	ldr	r2, [pc, #356]	; (80014dc <HAL_GPIO_Init+0x2f4>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800139e:	d025      	beq.n	80013ec <HAL_GPIO_Init+0x204>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_GPIO_Init+0x2f8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d01f      	beq.n	80013e8 <HAL_GPIO_Init+0x200>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4e      	ldr	r2, [pc, #312]	; (80014e4 <HAL_GPIO_Init+0x2fc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d019      	beq.n	80013e4 <HAL_GPIO_Init+0x1fc>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4d      	ldr	r2, [pc, #308]	; (80014e8 <HAL_GPIO_Init+0x300>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d013      	beq.n	80013e0 <HAL_GPIO_Init+0x1f8>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4c      	ldr	r2, [pc, #304]	; (80014ec <HAL_GPIO_Init+0x304>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00d      	beq.n	80013dc <HAL_GPIO_Init+0x1f4>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4b      	ldr	r2, [pc, #300]	; (80014f0 <HAL_GPIO_Init+0x308>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d007      	beq.n	80013d8 <HAL_GPIO_Init+0x1f0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4a      	ldr	r2, [pc, #296]	; (80014f4 <HAL_GPIO_Init+0x30c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d101      	bne.n	80013d4 <HAL_GPIO_Init+0x1ec>
 80013d0:	2306      	movs	r3, #6
 80013d2:	e00c      	b.n	80013ee <HAL_GPIO_Init+0x206>
 80013d4:	2307      	movs	r3, #7
 80013d6:	e00a      	b.n	80013ee <HAL_GPIO_Init+0x206>
 80013d8:	2305      	movs	r3, #5
 80013da:	e008      	b.n	80013ee <HAL_GPIO_Init+0x206>
 80013dc:	2304      	movs	r3, #4
 80013de:	e006      	b.n	80013ee <HAL_GPIO_Init+0x206>
 80013e0:	2303      	movs	r3, #3
 80013e2:	e004      	b.n	80013ee <HAL_GPIO_Init+0x206>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e002      	b.n	80013ee <HAL_GPIO_Init+0x206>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_GPIO_Init+0x206>
 80013ec:	2300      	movs	r3, #0
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	f002 0203 	and.w	r2, r2, #3
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	4093      	lsls	r3, r2
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013fe:	4937      	ldr	r1, [pc, #220]	; (80014dc <HAL_GPIO_Init+0x2f4>)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <HAL_GPIO_Init+0x310>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001430:	4a31      	ldr	r2, [pc, #196]	; (80014f8 <HAL_GPIO_Init+0x310>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_GPIO_Init+0x310>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800145a:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <HAL_GPIO_Init+0x310>)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_GPIO_Init+0x310>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001484:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <HAL_GPIO_Init+0x310>)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_GPIO_Init+0x310>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <HAL_GPIO_Init+0x310>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f47f ae97 	bne.w	80011f8 <HAL_GPIO_Init+0x10>
  }
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	48000400 	.word	0x48000400
 80014e4:	48000800 	.word	0x48000800
 80014e8:	48000c00 	.word	0x48000c00
 80014ec:	48001000 	.word	0x48001000
 80014f0:	48001400 	.word	0x48001400
 80014f4:	48001800 	.word	0x48001800
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e001      	b.n	800151e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001548:	e002      	b.n	8001550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001562:	af00      	add	r7, sp, #0
 8001564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001568:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800156c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800156e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001572:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	f001 b83a 	b.w	80025f6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001586:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 816f 	beq.w	8001876 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001598:	4bb5      	ldr	r3, [pc, #724]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d00c      	beq.n	80015be <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a4:	4bb2      	ldr	r3, [pc, #712]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d15c      	bne.n	800166a <HAL_RCC_OscConfig+0x10e>
 80015b0:	4baf      	ldr	r3, [pc, #700]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015bc:	d155      	bne.n	800166a <HAL_RCC_OscConfig+0x10e>
 80015be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	095b      	lsrs	r3, r3, #5
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d102      	bne.n	80015f0 <HAL_RCC_OscConfig+0x94>
 80015ea:	4ba1      	ldr	r3, [pc, #644]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	e015      	b.n	800161c <HAL_RCC_OscConfig+0xc0>
 80015f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001608:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800160c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001618:	4b95      	ldr	r3, [pc, #596]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001620:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001624:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001628:	fa92 f2a2 	rbit	r2, r2
 800162c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001630:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001634:	fab2 f282 	clz	r2, r2
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	f042 0220 	orr.w	r2, r2, #32
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	f002 021f 	and.w	r2, r2, #31
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f202 	lsl.w	r2, r1, r2
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8111 	beq.w	8001874 <HAL_RCC_OscConfig+0x318>
 8001652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001656:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 8108 	bne.w	8001874 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	f000 bfc6 	b.w	80025f6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x12e>
 800167c:	4b7c      	ldr	r3, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 8001682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e036      	b.n	80016f8 <HAL_RCC_OscConfig+0x19c>
 800168a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x158>
 800169a:	4b75      	ldr	r3, [pc, #468]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a74      	ldr	r2, [pc, #464]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b72      	ldr	r3, [pc, #456]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a71      	ldr	r2, [pc, #452]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e021      	b.n	80016f8 <HAL_RCC_OscConfig+0x19c>
 80016b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x184>
 80016c6:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a69      	ldr	r2, [pc, #420]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a66      	ldr	r2, [pc, #408]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e00b      	b.n	80016f8 <HAL_RCC_OscConfig+0x19c>
 80016e0:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a62      	ldr	r2, [pc, #392]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b60      	ldr	r3, [pc, #384]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5f      	ldr	r2, [pc, #380]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d059      	beq.n	80017bc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fc7c 	bl	8001004 <HAL_GetTick>
 800170c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001712:	f7ff fc77 	bl	8001004 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d902      	bls.n	8001728 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	f000 bf67 	b.w	80025f6 <HAL_RCC_OscConfig+0x109a>
 8001728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800173c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <HAL_RCC_OscConfig+0x1fe>
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x22a>
 800175a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800176e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001772:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001776:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800178a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800178e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001792:	fa92 f2a2 	rbit	r2, r2
 8001796:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800179a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	f042 0220 	orr.w	r2, r2, #32
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f002 021f 	and.w	r2, r2, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0ab      	beq.n	8001712 <HAL_RCC_OscConfig+0x1b6>
 80017ba:	e05c      	b.n	8001876 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc22 	bl	8001004 <HAL_GetTick>
 80017c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c6:	f7ff fc1d 	bl	8001004 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d902      	bls.n	80017dc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	f000 bf0d 	b.w	80025f6 <HAL_RCC_OscConfig+0x109a>
 80017dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80017f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f4:	fab3 f383 	clz	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d102      	bne.n	800180e <HAL_RCC_OscConfig+0x2b2>
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	e015      	b.n	800183a <HAL_RCC_OscConfig+0x2de>
 800180e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001812:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001826:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800182a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_RCC_OscConfig+0x314>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800183e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001842:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001846:	fa92 f2a2 	rbit	r2, r2
 800184a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800184e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001852:	fab2 f282 	clz	r2, r2
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	f042 0220 	orr.w	r2, r2, #32
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	f002 021f 	and.w	r2, r2, #31
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f202 	lsl.w	r2, r1, r2
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ab      	bne.n	80017c6 <HAL_RCC_OscConfig+0x26a>
 800186e:	e002      	b.n	8001876 <HAL_RCC_OscConfig+0x31a>
 8001870:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 817f 	beq.w	8001b8a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800188c:	4ba7      	ldr	r3, [pc, #668]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00c      	beq.n	80018b2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001898:	4ba4      	ldr	r3, [pc, #656]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d173      	bne.n	800198c <HAL_RCC_OscConfig+0x430>
 80018a4:	4ba1      	ldr	r3, [pc, #644]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80018ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018b0:	d16c      	bne.n	800198c <HAL_RCC_OscConfig+0x430>
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80018c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d102      	bne.n	80018e2 <HAL_RCC_OscConfig+0x386>
 80018dc:	4b93      	ldr	r3, [pc, #588]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	e013      	b.n	800190a <HAL_RCC_OscConfig+0x3ae>
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018fa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001906:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	2202      	movs	r2, #2
 800190c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001910:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001914:	fa92 f2a2 	rbit	r2, r2
 8001918:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800191c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f042 0220 	orr.w	r2, r2, #32
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00a      	beq.n	8001952 <HAL_RCC_OscConfig+0x3f6>
 800193c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001940:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d002      	beq.n	8001952 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	f000 be52 	b.w	80025f6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b76      	ldr	r3, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	21f8      	movs	r1, #248	; 0xf8
 8001968:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001970:	fa91 f1a1 	rbit	r1, r1
 8001974:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001978:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800197c:	fab1 f181 	clz	r1, r1
 8001980:	b2c9      	uxtb	r1, r1
 8001982:	408b      	lsls	r3, r1
 8001984:	4969      	ldr	r1, [pc, #420]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	e0fe      	b.n	8001b8a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8088 	beq.w	8001aae <HAL_RCC_OscConfig+0x552>
 800199e:	2301      	movs	r3, #1
 80019a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80019b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	461a      	mov	r2, r3
 80019c6:	2301      	movs	r3, #1
 80019c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb1b 	bl	8001004 <HAL_GetTick>
 80019ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fb16 	bl	8001004 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d902      	bls.n	80019ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	f000 be06 	b.w	80025f6 <HAL_RCC_OscConfig+0x109a>
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80019fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_OscConfig+0x4be>
 8001a14:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	e013      	b.n	8001a42 <HAL_RCC_OscConfig+0x4e6>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a32:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	2202      	movs	r2, #2
 8001a44:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001a48:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a4c:	fa92 f2a2 	rbit	r2, r2
 8001a50:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001a54:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a58:	fab2 f282 	clz	r2, r2
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	f042 0220 	orr.w	r2, r2, #32
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	f002 021f 	and.w	r2, r2, #31
 8001a68:	2101      	movs	r1, #1
 8001a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0af      	beq.n	80019d4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	21f8      	movs	r1, #248	; 0xf8
 8001a8a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001a92:	fa91 f1a1 	rbit	r1, r1
 8001a96:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001a9a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a9e:	fab1 f181 	clz	r1, r1
 8001aa2:	b2c9      	uxtb	r1, r1
 8001aa4:	408b      	lsls	r3, r1
 8001aa6:	4921      	ldr	r1, [pc, #132]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e06d      	b.n	8001b8a <HAL_RCC_OscConfig+0x62e>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001ac0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ace:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fa93 	bl	8001004 <HAL_GetTick>
 8001ade:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fa8e 	bl	8001004 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d902      	bls.n	8001afa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	f000 bd7e 	b.w	80025f6 <HAL_RCC_OscConfig+0x109a>
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001b0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0x5d4>
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <HAL_RCC_OscConfig+0x5d0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	e016      	b.n	8001b58 <HAL_RCC_OscConfig+0x5fc>
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	2302      	movs	r3, #2
 8001b32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b54:	4bbf      	ldr	r3, [pc, #764]	; (8001e54 <HAL_RCC_OscConfig+0x8f8>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001b5e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001b62:	fa92 f2a2 	rbit	r2, r2
 8001b66:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001b6a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f042 0220 	orr.w	r2, r2, #32
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	f002 021f 	and.w	r2, r2, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f202 	lsl.w	r2, r1, r2
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ac      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8113 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d07c      	beq.n	8001caa <HAL_RCC_OscConfig+0x74e>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001bc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4ba2      	ldr	r3, [pc, #648]	; (8001e58 <HAL_RCC_OscConfig+0x8fc>)
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fa13 	bl	8001004 <HAL_GetTick>
 8001bde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fa0e 	bl	8001004 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d902      	bls.n	8001bfa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f000 bcfe 	b.w	80025f6 <HAL_RCC_OscConfig+0x109a>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	4b7e      	ldr	r3, [pc, #504]	; (8001e54 <HAL_RCC_OscConfig+0x8f8>)
 8001c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c66:	2102      	movs	r1, #2
 8001c68:	6019      	str	r1, [r3, #0]
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fa93 f1a3 	rbit	r1, r3
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c80:	6019      	str	r1, [r3, #0]
  return result;
 8001c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c86:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d09d      	beq.n	8001be4 <HAL_RCC_OscConfig+0x688>
 8001ca8:	e08d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x86a>
 8001caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	fa93 f2a3 	rbit	r2, r3
 8001cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ccc:	601a      	str	r2, [r3, #0]
  return result;
 8001cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cd6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x8fc>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7ff f98a 	bl	8001004 <HAL_GetTick>
 8001cf0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f985 	bl	8001004 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d902      	bls.n	8001d0c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	f000 bc75 	b.w	80025f6 <HAL_RCC_OscConfig+0x109a>
 8001d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d14:	2202      	movs	r2, #2
 8001d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d38:	2202      	movs	r2, #2
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d64:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x8f8>)
 8001d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d84:	2102      	movs	r1, #2
 8001d86:	6019      	str	r1, [r3, #0]
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f1a3 	rbit	r1, r3
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d9e:	6019      	str	r1, [r3, #0]
  return result;
 8001da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d197      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 81a5 	beq.w	8002126 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_RCC_OscConfig+0x8f8>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d116      	bne.n	8001e1c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_RCC_OscConfig+0x8f8>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_RCC_OscConfig+0x8f8>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	61d3      	str	r3, [r2, #28]
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_RCC_OscConfig+0x8f8>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e14:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_OscConfig+0x900>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d121      	bne.n	8001e6c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_RCC_OscConfig+0x900>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_RCC_OscConfig+0x900>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e34:	f7ff f8e6 	bl	8001004 <HAL_GetTick>
 8001e38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	e010      	b.n	8001e60 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff f8e1 	bl	8001004 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d908      	bls.n	8001e60 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e3d1      	b.n	80025f6 <HAL_RCC_OscConfig+0x109a>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	10908120 	.word	0x10908120
 8001e5c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	4b8d      	ldr	r3, [pc, #564]	; (8002098 <HAL_RCC_OscConfig+0xb3c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0e8      	beq.n	8001e3e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x92e>
 8001e7c:	4b87      	ldr	r3, [pc, #540]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a86      	ldr	r2, [pc, #536]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	e035      	b.n	8001ef6 <HAL_RCC_OscConfig+0x99a>
 8001e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x958>
 8001e9a:	4b80      	ldr	r3, [pc, #512]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a7f      	ldr	r2, [pc, #508]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	4b7d      	ldr	r3, [pc, #500]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a7c      	ldr	r2, [pc, #496]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	6213      	str	r3, [r2, #32]
 8001eb2:	e020      	b.n	8001ef6 <HAL_RCC_OscConfig+0x99a>
 8001eb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d10c      	bne.n	8001ede <HAL_RCC_OscConfig+0x982>
 8001ec4:	4b75      	ldr	r3, [pc, #468]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a74      	ldr	r2, [pc, #464]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	4b72      	ldr	r3, [pc, #456]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a71      	ldr	r2, [pc, #452]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	e00b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x99a>
 8001ede:	4b6f      	ldr	r3, [pc, #444]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a6e      	ldr	r2, [pc, #440]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6213      	str	r3, [r2, #32]
 8001eea:	4b6c      	ldr	r3, [pc, #432]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a6b      	ldr	r2, [pc, #428]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8081 	beq.w	800200a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7ff f87c 	bl	8001004 <HAL_GetTick>
 8001f0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7ff f877 	bl	8001004 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e365      	b.n	80025f6 <HAL_RCC_OscConfig+0x109a>
 8001f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f32:	2202      	movs	r2, #2
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f56:	2202      	movs	r2, #2
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f70:	601a      	str	r2, [r3, #0]
  return result;
 8001f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f76:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d102      	bne.n	8001f96 <HAL_RCC_OscConfig+0xa3a>
 8001f90:	4b42      	ldr	r3, [pc, #264]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	e013      	b.n	8001fbe <HAL_RCC_OscConfig+0xa62>
 8001f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f2a3 	rbit	r2, r3
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	4b38      	ldr	r3, [pc, #224]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fc2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	6011      	str	r1, [r2, #0]
 8001fca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	fa92 f1a2 	rbit	r1, r2
 8001fd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fdc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001fe0:	6011      	str	r1, [r2, #0]
  return result;
 8001fe2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fe6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	fab2 f282 	clz	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f002 021f 	and.w	r2, r2, #31
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d084      	beq.n	8001f12 <HAL_RCC_OscConfig+0x9b6>
 8002008:	e083      	b.n	8002112 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7fe fffb 	bl	8001004 <HAL_GetTick>
 800200e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7fe fff6 	bl	8001004 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e2e4      	b.n	80025f6 <HAL_RCC_OscConfig+0x109a>
 800202c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002030:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002034:	2202      	movs	r2, #2
 8002036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002054:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002058:	2202      	movs	r2, #2
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002060:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002072:	601a      	str	r2, [r3, #0]
  return result;
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800207c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d106      	bne.n	80020a0 <HAL_RCC_OscConfig+0xb44>
 8002092:	4b02      	ldr	r3, [pc, #8]	; (800209c <HAL_RCC_OscConfig+0xb40>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	e017      	b.n	80020c8 <HAL_RCC_OscConfig+0xb6c>
 8002098:	40007000 	.word	0x40007000
 800209c:	40021000 	.word	0x40021000
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80020a8:	2202      	movs	r2, #2
 80020aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	fa93 f2a3 	rbit	r2, r3
 80020ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020be:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	4bb3      	ldr	r3, [pc, #716]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020d0:	2102      	movs	r1, #2
 80020d2:	6011      	str	r1, [r2, #0]
 80020d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	fa92 f1a2 	rbit	r1, r2
 80020e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020e6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80020ea:	6011      	str	r1, [r2, #0]
  return result;
 80020ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020f0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	fab2 f282 	clz	r2, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	f002 021f 	and.w	r2, r2, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f202 	lsl.w	r2, r1, r2
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d180      	bne.n	8002014 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002112:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b9e      	ldr	r3, [pc, #632]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a9d      	ldr	r2, [pc, #628]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 825e 	beq.w	80025f4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002138:	4b96      	ldr	r3, [pc, #600]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	f000 821f 	beq.w	8002584 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b02      	cmp	r3, #2
 8002154:	f040 8170 	bne.w	8002438 <HAL_RCC_OscConfig+0xedc>
 8002158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002178:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800217c:	601a      	str	r2, [r3, #0]
  return result;
 800217e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002182:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002186:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002192:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	461a      	mov	r2, r3
 800219a:	2300      	movs	r3, #0
 800219c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe ff31 	bl	8001004 <HAL_GetTick>
 80021a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a6:	e009      	b.n	80021bc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a8:	f7fe ff2c 	bl	8001004 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e21c      	b.n	80025f6 <HAL_RCC_OscConfig+0x109a>
 80021bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	fa93 f2a3 	rbit	r2, r3
 80021d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021e0:	601a      	str	r2, [r3, #0]
  return result;
 80021e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d102      	bne.n	8002206 <HAL_RCC_OscConfig+0xcaa>
 8002200:	4b64      	ldr	r3, [pc, #400]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	e027      	b.n	8002256 <HAL_RCC_OscConfig+0xcfa>
 8002206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800220e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002218:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f2a3 	rbit	r2, r3
 8002222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002226:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002230:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800225a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800225e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002262:	6011      	str	r1, [r2, #0]
 8002264:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002268:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	fa92 f1a2 	rbit	r1, r2
 8002272:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002276:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800227a:	6011      	str	r1, [r2, #0]
  return result;
 800227c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002280:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	fab2 f282 	clz	r2, r2
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f042 0220 	orr.w	r2, r2, #32
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	f002 021f 	and.w	r2, r2, #31
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d182      	bne.n	80021a8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a2:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f023 020f 	bic.w	r2, r3, #15
 80022aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	4937      	ldr	r1, [pc, #220]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80022c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a19      	ldr	r1, [r3, #32]
 80022d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	430b      	orrs	r3, r1
 80022de:	492d      	ldr	r1, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
 80022e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fa93 f2a3 	rbit	r2, r3
 8002300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002304:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002308:	601a      	str	r2, [r3, #0]
  return result;
 800230a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002312:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800231e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	461a      	mov	r2, r3
 8002326:	2301      	movs	r3, #1
 8002328:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fe6b 	bl	8001004 <HAL_GetTick>
 800232e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002332:	e009      	b.n	8002348 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fe66 	bl	8001004 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e156      	b.n	80025f6 <HAL_RCC_OscConfig+0x109a>
 8002348:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002368:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800236c:	601a      	str	r2, [r3, #0]
  return result;
 800236e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002372:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002376:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <HAL_RCC_OscConfig+0xe3c>
 800238c:	4b01      	ldr	r3, [pc, #4]	; (8002394 <HAL_RCC_OscConfig+0xe38>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	e02a      	b.n	80023e8 <HAL_RCC_OscConfig+0xe8c>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023aa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80023c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023de:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	4b86      	ldr	r3, [pc, #536]	; (8002600 <HAL_RCC_OscConfig+0x10a4>)
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023ec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023f4:	6011      	str	r1, [r2, #0]
 80023f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023fa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	fa92 f1a2 	rbit	r1, r2
 8002404:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002408:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800240c:	6011      	str	r1, [r2, #0]
  return result;
 800240e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002412:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f002 021f 	and.w	r2, r2, #31
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f202 	lsl.w	r2, r1, r2
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	f43f af7f 	beq.w	8002334 <HAL_RCC_OscConfig+0xdd8>
 8002436:	e0dd      	b.n	80025f4 <HAL_RCC_OscConfig+0x1098>
 8002438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002440:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fa93 f2a3 	rbit	r2, r3
 8002454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002458:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800245c:	601a      	str	r2, [r3, #0]
  return result;
 800245e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002462:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002466:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002472:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	461a      	mov	r2, r3
 800247a:	2300      	movs	r3, #0
 800247c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fdc1 	bl	8001004 <HAL_GetTick>
 8002482:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	e009      	b.n	800249c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fdbc 	bl	8001004 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0ac      	b.n	80025f6 <HAL_RCC_OscConfig+0x109a>
 800249c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024c0:	601a      	str	r2, [r3, #0]
  return result;
 80024c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d102      	bne.n	80024e6 <HAL_RCC_OscConfig+0xf8a>
 80024e0:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_RCC_OscConfig+0x10a4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	e027      	b.n	8002536 <HAL_RCC_OscConfig+0xfda>
 80024e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ea:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80024ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002506:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002510:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	4b33      	ldr	r3, [pc, #204]	; (8002600 <HAL_RCC_OscConfig+0x10a4>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800253a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800253e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002542:	6011      	str	r1, [r2, #0]
 8002544:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002548:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	fa92 f1a2 	rbit	r1, r2
 8002552:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002556:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800255a:	6011      	str	r1, [r2, #0]
  return result;
 800255c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002560:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	fab2 f282 	clz	r2, r2
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	f042 0220 	orr.w	r2, r2, #32
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f002 021f 	and.w	r2, r2, #31
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f202 	lsl.w	r2, r1, r2
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d182      	bne.n	8002488 <HAL_RCC_OscConfig+0xf2c>
 8002582:	e037      	b.n	80025f4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002588:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e02e      	b.n	80025f6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_RCC_OscConfig+0x10a4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_RCC_OscConfig+0x10a4>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025ac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80025b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d117      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025c4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80025d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b09e      	sub	sp, #120	; 0x78
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e162      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b90      	ldr	r3, [pc, #576]	; (8002860 <HAL_RCC_ClockConfig+0x25c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d910      	bls.n	800264c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b8d      	ldr	r3, [pc, #564]	; (8002860 <HAL_RCC_ClockConfig+0x25c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	498b      	ldr	r1, [pc, #556]	; (8002860 <HAL_RCC_ClockConfig+0x25c>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_ClockConfig+0x25c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e14a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002658:	4b82      	ldr	r3, [pc, #520]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	497f      	ldr	r1, [pc, #508]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80dc 	beq.w	8002830 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d13c      	bne.n	80026fa <HAL_RCC_ClockConfig+0xf6>
 8002680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002684:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800268e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d102      	bne.n	80026aa <HAL_RCC_ClockConfig+0xa6>
 80026a4:	4b6f      	ldr	r3, [pc, #444]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	e00f      	b.n	80026ca <HAL_RCC_ClockConfig+0xc6>
 80026aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	667b      	str	r3, [r7, #100]	; 0x64
 80026b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026bc:	663b      	str	r3, [r7, #96]	; 0x60
 80026be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026c6:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80026d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026d2:	fa92 f2a2 	rbit	r2, r2
 80026d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026da:	fab2 f282 	clz	r2, r2
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f002 021f 	and.w	r2, r2, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d17b      	bne.n	80027ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0f3      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d13c      	bne.n	800277c <HAL_RCC_ClockConfig+0x178>
 8002702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002706:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d102      	bne.n	800272c <HAL_RCC_ClockConfig+0x128>
 8002726:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	e00f      	b.n	800274c <HAL_RCC_ClockConfig+0x148>
 800272c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002730:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
 800273a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273e:	643b      	str	r3, [r7, #64]	; 0x40
 8002740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002748:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002750:	63ba      	str	r2, [r7, #56]	; 0x38
 8002752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002754:	fa92 f2a2 	rbit	r2, r2
 8002758:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800275a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f042 0220 	orr.w	r2, r2, #32
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f002 021f 	and.w	r2, r2, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d13a      	bne.n	80027ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0b2      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2de>
 800277c:	2302      	movs	r3, #2
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x1a0>
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e00d      	b.n	80027c0 <HAL_RCC_ClockConfig+0x1bc>
 80027a4:	2302      	movs	r3, #2
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
 80027b0:	2302      	movs	r3, #2
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	4b29      	ldr	r3, [pc, #164]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	2202      	movs	r2, #2
 80027c2:	61ba      	str	r2, [r7, #24]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	fa92 f2a2 	rbit	r2, r2
 80027ca:	617a      	str	r2, [r7, #20]
  return result;
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f002 021f 	and.w	r2, r2, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e079      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	491a      	ldr	r1, [pc, #104]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7fe fc00 	bl	8001004 <HAL_GetTick>
 8002804:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe fbfc 	bl	8001004 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e061      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_RCC_ClockConfig+0x260>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_ClockConfig+0x25c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d214      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_RCC_ClockConfig+0x25c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	4906      	ldr	r1, [pc, #24]	; (8002860 <HAL_RCC_ClockConfig+0x25c>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_RCC_ClockConfig+0x25c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e040      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2de>
 8002860:	40022000 	.word	0x40022000
 8002864:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_RCC_ClockConfig+0x2e8>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	491a      	ldr	r1, [pc, #104]	; (80028ec <HAL_RCC_ClockConfig+0x2e8>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_RCC_ClockConfig+0x2e8>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4912      	ldr	r1, [pc, #72]	; (80028ec <HAL_RCC_ClockConfig+0x2e8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028a6:	f000 f829 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028aa:	4601      	mov	r1, r0
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_RCC_ClockConfig+0x2e8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b4:	22f0      	movs	r2, #240	; 0xf0
 80028b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	fa92 f2a2 	rbit	r2, r2
 80028be:	60fa      	str	r2, [r7, #12]
  return result;
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	40d3      	lsrs	r3, r2
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x2ec>)
 80028cc:	5cd3      	ldrb	r3, [r2, r3]
 80028ce:	fa21 f303 	lsr.w	r3, r1, r3
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <HAL_RCC_ClockConfig+0x2f0>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HAL_RCC_ClockConfig+0x2f4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fb4e 	bl	8000f7c <HAL_InitTick>
  
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3778      	adds	r7, #120	; 0x78
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	080038a0 	.word	0x080038a0
 80028f4:	20000000 	.word	0x20000000
 80028f8:	20000004 	.word	0x20000004

080028fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b08b      	sub	sp, #44	; 0x2c
 8002900:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b04      	cmp	r3, #4
 8002924:	d002      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x30>
 8002926:	2b08      	cmp	r3, #8
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x36>
 800292a:	e03f      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	e03f      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002938:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800293c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	fa92 f2a2 	rbit	r2, r2
 8002944:	607a      	str	r2, [r7, #4]
  return result;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	fab2 f282 	clz	r2, r2
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	40d3      	lsrs	r3, r2
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	220f      	movs	r2, #15
 8002960:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	fa92 f2a2 	rbit	r2, r2
 8002968:	60fa      	str	r2, [r7, #12]
  return result;
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	40d3      	lsrs	r3, r2
 8002974:	4a15      	ldr	r2, [pc, #84]	; (80029cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	fbb2 f2f3 	udiv	r2, r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	e007      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002996:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fbb2 f2f3 	udiv	r2, r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fb02 f303 	mul.w	r3, r2, r3
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	623b      	str	r3, [r7, #32]
      break;
 80029aa:	e002      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029ae:	623b      	str	r3, [r7, #32]
      break;
 80029b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b2:	6a3b      	ldr	r3, [r7, #32]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	372c      	adds	r7, #44	; 0x2c
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40021000 	.word	0x40021000
 80029c4:	007a1200 	.word	0x007a1200
 80029c8:	080038b8 	.word	0x080038b8
 80029cc:	080038c8 	.word	0x080038c8

080029d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000

080029e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029ee:	f7ff ffef 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 80029f2:	4601      	mov	r1, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	fa92 f2a2 	rbit	r2, r2
 8002a08:	603a      	str	r2, [r7, #0]
  return result;
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	fab2 f282 	clz	r2, r2
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	40d3      	lsrs	r3, r2
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	080038b0 	.word	0x080038b0

08002a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a32:	f7ff ffcd 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a36:	4601      	mov	r1, r0
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a40:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	fa92 f2a2 	rbit	r2, r2
 8002a4c:	603a      	str	r2, [r7, #0]
  return result;
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	fab2 f282 	clz	r2, r2
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	40d3      	lsrs	r3, r2
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a5a:	5cd3      	ldrb	r3, [r2, r3]
 8002a5c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	080038b0 	.word	0x080038b0

08002a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b092      	sub	sp, #72	; 0x48
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80d4 	beq.w	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a94:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10e      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	61d3      	str	r3, [r2, #28]
 8002aac:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b45      	ldr	r3, [pc, #276]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a41      	ldr	r2, [pc, #260]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fa95 	bl	8001004 <HAL_GetTick>
 8002ada:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe fa91 	bl	8001004 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b64      	cmp	r3, #100	; 0x64
 8002aea:	d901      	bls.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e1d6      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002afc:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8084 	beq.w	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d07c      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	461a      	mov	r2, r3
 8002b46:	2301      	movs	r3, #1
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b72:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d04b      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fa41 	bl	8001004 <HAL_GetTick>
 8002b82:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fa3d 	bl	8001004 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e180      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba8:	2302      	movs	r3, #2
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	61fb      	str	r3, [r7, #28]
  return result;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d108      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bca:	4b01      	ldr	r3, [pc, #4]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	e00d      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	10908100 	.word	0x10908100
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	4b9a      	ldr	r3, [pc, #616]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2202      	movs	r2, #2
 8002bee:	613a      	str	r2, [r7, #16]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	fa92 f2a2 	rbit	r2, r2
 8002bf6:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f002 021f 	and.w	r2, r2, #31
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0b7      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c16:	4b8f      	ldr	r3, [pc, #572]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	498c      	ldr	r1, [pc, #560]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a87      	ldr	r2, [pc, #540]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c48:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f023 0203 	bic.w	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	497f      	ldr	r1, [pc, #508]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c66:	4b7b      	ldr	r3, [pc, #492]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4978      	ldr	r1, [pc, #480]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c84:	4b73      	ldr	r3, [pc, #460]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	4970      	ldr	r1, [pc, #448]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca2:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f023 0210 	bic.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4969      	ldr	r1, [pc, #420]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002cc0:	4b64      	ldr	r3, [pc, #400]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	4961      	ldr	r1, [pc, #388]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cde:	4b5d      	ldr	r3, [pc, #372]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f023 0220 	bic.w	r2, r3, #32
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	495a      	ldr	r1, [pc, #360]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cfc:	4b55      	ldr	r3, [pc, #340]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	4952      	ldr	r1, [pc, #328]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	494b      	ldr	r1, [pc, #300]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d38:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	4943      	ldr	r1, [pc, #268]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d56:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	493c      	ldr	r1, [pc, #240]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d74:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	4934      	ldr	r1, [pc, #208]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	492d      	ldr	r1, [pc, #180]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbc:	4925      	ldr	r1, [pc, #148]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	491e      	ldr	r1, [pc, #120]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	4916      	ldr	r1, [pc, #88]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	490f      	ldr	r1, [pc, #60]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	4907      	ldr	r1, [pc, #28]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e46:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	e002      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	4913      	ldr	r1, [pc, #76]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e78:	490b      	ldr	r1, [pc, #44]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e96:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3748      	adds	r7, #72	; 0x48
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000

08002eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e040      	b.n	8002f40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fd ff94 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	; 0x24
 8002ed8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8b6 	bl	800305c <UART_SetConfig>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e022      	b.n	8002f40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa7e 	bl	8003404 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fb05 	bl	8003548 <UART_CheckIdleState>
 8002f3e:	4603      	mov	r3, r0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d178      	bne.n	8003052 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Transmit+0x24>
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e071      	b.n	8003054 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2221      	movs	r2, #33	; 0x21
 8002f7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f7e:	f7fe f841 	bl	8001004 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9c:	d108      	bne.n	8002fb0 <HAL_UART_Transmit+0x68>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d104      	bne.n	8002fb0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	e003      	b.n	8002fb8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fb8:	e030      	b.n	800301c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2180      	movs	r1, #128	; 0x80
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fb67 	bl	8003698 <UART_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e03c      	b.n	8003054 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	881a      	ldrh	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fec:	b292      	uxth	r2, r2
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e008      	b.n	800300a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b292      	uxth	r2, r2
 8003002:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1c8      	bne.n	8002fba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	2140      	movs	r1, #64	; 0x40
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fb30 	bl	8003698 <UART_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e005      	b.n	8003054 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	e000      	b.n	8003054 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
  }
}
 8003054:	4618      	mov	r0, r3
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <UART_SetConfig+0x274>)
 8003088:	4013      	ands	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	6979      	ldr	r1, [r7, #20]
 8003090:	430b      	orrs	r3, r1
 8003092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a80      	ldr	r2, [pc, #512]	; (80032d4 <UART_SetConfig+0x278>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d120      	bne.n	800311a <UART_SetConfig+0xbe>
 80030d8:	4b7f      	ldr	r3, [pc, #508]	; (80032d8 <UART_SetConfig+0x27c>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d817      	bhi.n	8003114 <UART_SetConfig+0xb8>
 80030e4:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <UART_SetConfig+0x90>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	08003109 	.word	0x08003109
 80030f4:	0800310f 	.word	0x0800310f
 80030f8:	08003103 	.word	0x08003103
 80030fc:	2301      	movs	r3, #1
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e0b5      	b.n	800326e <UART_SetConfig+0x212>
 8003102:	2302      	movs	r3, #2
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e0b2      	b.n	800326e <UART_SetConfig+0x212>
 8003108:	2304      	movs	r3, #4
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e0af      	b.n	800326e <UART_SetConfig+0x212>
 800310e:	2308      	movs	r3, #8
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	e0ac      	b.n	800326e <UART_SetConfig+0x212>
 8003114:	2310      	movs	r3, #16
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e0a9      	b.n	800326e <UART_SetConfig+0x212>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6f      	ldr	r2, [pc, #444]	; (80032dc <UART_SetConfig+0x280>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d124      	bne.n	800316e <UART_SetConfig+0x112>
 8003124:	4b6c      	ldr	r3, [pc, #432]	; (80032d8 <UART_SetConfig+0x27c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800312c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003130:	d011      	beq.n	8003156 <UART_SetConfig+0xfa>
 8003132:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003136:	d817      	bhi.n	8003168 <UART_SetConfig+0x10c>
 8003138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800313c:	d011      	beq.n	8003162 <UART_SetConfig+0x106>
 800313e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003142:	d811      	bhi.n	8003168 <UART_SetConfig+0x10c>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <UART_SetConfig+0xf4>
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d006      	beq.n	800315c <UART_SetConfig+0x100>
 800314e:	e00b      	b.n	8003168 <UART_SetConfig+0x10c>
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e08b      	b.n	800326e <UART_SetConfig+0x212>
 8003156:	2302      	movs	r3, #2
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e088      	b.n	800326e <UART_SetConfig+0x212>
 800315c:	2304      	movs	r3, #4
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e085      	b.n	800326e <UART_SetConfig+0x212>
 8003162:	2308      	movs	r3, #8
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e082      	b.n	800326e <UART_SetConfig+0x212>
 8003168:	2310      	movs	r3, #16
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e07f      	b.n	800326e <UART_SetConfig+0x212>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5b      	ldr	r2, [pc, #364]	; (80032e0 <UART_SetConfig+0x284>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d124      	bne.n	80031c2 <UART_SetConfig+0x166>
 8003178:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <UART_SetConfig+0x27c>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003180:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003184:	d011      	beq.n	80031aa <UART_SetConfig+0x14e>
 8003186:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800318a:	d817      	bhi.n	80031bc <UART_SetConfig+0x160>
 800318c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003190:	d011      	beq.n	80031b6 <UART_SetConfig+0x15a>
 8003192:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003196:	d811      	bhi.n	80031bc <UART_SetConfig+0x160>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <UART_SetConfig+0x148>
 800319c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031a0:	d006      	beq.n	80031b0 <UART_SetConfig+0x154>
 80031a2:	e00b      	b.n	80031bc <UART_SetConfig+0x160>
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e061      	b.n	800326e <UART_SetConfig+0x212>
 80031aa:	2302      	movs	r3, #2
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e05e      	b.n	800326e <UART_SetConfig+0x212>
 80031b0:	2304      	movs	r3, #4
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e05b      	b.n	800326e <UART_SetConfig+0x212>
 80031b6:	2308      	movs	r3, #8
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e058      	b.n	800326e <UART_SetConfig+0x212>
 80031bc:	2310      	movs	r3, #16
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e055      	b.n	800326e <UART_SetConfig+0x212>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a47      	ldr	r2, [pc, #284]	; (80032e4 <UART_SetConfig+0x288>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d124      	bne.n	8003216 <UART_SetConfig+0x1ba>
 80031cc:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <UART_SetConfig+0x27c>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031d8:	d011      	beq.n	80031fe <UART_SetConfig+0x1a2>
 80031da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031de:	d817      	bhi.n	8003210 <UART_SetConfig+0x1b4>
 80031e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e4:	d011      	beq.n	800320a <UART_SetConfig+0x1ae>
 80031e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ea:	d811      	bhi.n	8003210 <UART_SetConfig+0x1b4>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <UART_SetConfig+0x19c>
 80031f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f4:	d006      	beq.n	8003204 <UART_SetConfig+0x1a8>
 80031f6:	e00b      	b.n	8003210 <UART_SetConfig+0x1b4>
 80031f8:	2300      	movs	r3, #0
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e037      	b.n	800326e <UART_SetConfig+0x212>
 80031fe:	2302      	movs	r3, #2
 8003200:	77fb      	strb	r3, [r7, #31]
 8003202:	e034      	b.n	800326e <UART_SetConfig+0x212>
 8003204:	2304      	movs	r3, #4
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e031      	b.n	800326e <UART_SetConfig+0x212>
 800320a:	2308      	movs	r3, #8
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e02e      	b.n	800326e <UART_SetConfig+0x212>
 8003210:	2310      	movs	r3, #16
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e02b      	b.n	800326e <UART_SetConfig+0x212>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a33      	ldr	r2, [pc, #204]	; (80032e8 <UART_SetConfig+0x28c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d124      	bne.n	800326a <UART_SetConfig+0x20e>
 8003220:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <UART_SetConfig+0x27c>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003228:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800322c:	d011      	beq.n	8003252 <UART_SetConfig+0x1f6>
 800322e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003232:	d817      	bhi.n	8003264 <UART_SetConfig+0x208>
 8003234:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003238:	d011      	beq.n	800325e <UART_SetConfig+0x202>
 800323a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800323e:	d811      	bhi.n	8003264 <UART_SetConfig+0x208>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <UART_SetConfig+0x1f0>
 8003244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003248:	d006      	beq.n	8003258 <UART_SetConfig+0x1fc>
 800324a:	e00b      	b.n	8003264 <UART_SetConfig+0x208>
 800324c:	2300      	movs	r3, #0
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e00d      	b.n	800326e <UART_SetConfig+0x212>
 8003252:	2302      	movs	r3, #2
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e00a      	b.n	800326e <UART_SetConfig+0x212>
 8003258:	2304      	movs	r3, #4
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e007      	b.n	800326e <UART_SetConfig+0x212>
 800325e:	2308      	movs	r3, #8
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e004      	b.n	800326e <UART_SetConfig+0x212>
 8003264:	2310      	movs	r3, #16
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e001      	b.n	800326e <UART_SetConfig+0x212>
 800326a:	2310      	movs	r3, #16
 800326c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003276:	d16b      	bne.n	8003350 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003278:	7ffb      	ldrb	r3, [r7, #31]
 800327a:	2b08      	cmp	r3, #8
 800327c:	d838      	bhi.n	80032f0 <UART_SetConfig+0x294>
 800327e:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <UART_SetConfig+0x228>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	080032a9 	.word	0x080032a9
 8003288:	080032b1 	.word	0x080032b1
 800328c:	080032b9 	.word	0x080032b9
 8003290:	080032f1 	.word	0x080032f1
 8003294:	080032bf 	.word	0x080032bf
 8003298:	080032f1 	.word	0x080032f1
 800329c:	080032f1 	.word	0x080032f1
 80032a0:	080032f1 	.word	0x080032f1
 80032a4:	080032c7 	.word	0x080032c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a8:	f7ff fb9e 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 80032ac:	61b8      	str	r0, [r7, #24]
        break;
 80032ae:	e024      	b.n	80032fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7ff fbbc 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
 80032b4:	61b8      	str	r0, [r7, #24]
        break;
 80032b6:	e020      	b.n	80032fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <UART_SetConfig+0x290>)
 80032ba:	61bb      	str	r3, [r7, #24]
        break;
 80032bc:	e01d      	b.n	80032fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032be:	f7ff fb1d 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80032c2:	61b8      	str	r0, [r7, #24]
        break;
 80032c4:	e019      	b.n	80032fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	61bb      	str	r3, [r7, #24]
        break;
 80032cc:	e015      	b.n	80032fa <UART_SetConfig+0x29e>
 80032ce:	bf00      	nop
 80032d0:	efff69f3 	.word	0xefff69f3
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40004400 	.word	0x40004400
 80032e0:	40004800 	.word	0x40004800
 80032e4:	40004c00 	.word	0x40004c00
 80032e8:	40005000 	.word	0x40005000
 80032ec:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	77bb      	strb	r3, [r7, #30]
        break;
 80032f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d073      	beq.n	80033e8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	005a      	lsls	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	441a      	add	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b0f      	cmp	r3, #15
 800331a:	d916      	bls.n	800334a <UART_SetConfig+0x2ee>
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003322:	d212      	bcs.n	800334a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f023 030f 	bic.w	r3, r3, #15
 800332c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	b29a      	uxth	r2, r3
 800333a:	89fb      	ldrh	r3, [r7, #14]
 800333c:	4313      	orrs	r3, r2
 800333e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	89fa      	ldrh	r2, [r7, #14]
 8003346:	60da      	str	r2, [r3, #12]
 8003348:	e04e      	b.n	80033e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	77bb      	strb	r3, [r7, #30]
 800334e:	e04b      	b.n	80033e8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003350:	7ffb      	ldrb	r3, [r7, #31]
 8003352:	2b08      	cmp	r3, #8
 8003354:	d827      	bhi.n	80033a6 <UART_SetConfig+0x34a>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <UART_SetConfig+0x300>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003381 	.word	0x08003381
 8003360:	08003389 	.word	0x08003389
 8003364:	08003391 	.word	0x08003391
 8003368:	080033a7 	.word	0x080033a7
 800336c:	08003397 	.word	0x08003397
 8003370:	080033a7 	.word	0x080033a7
 8003374:	080033a7 	.word	0x080033a7
 8003378:	080033a7 	.word	0x080033a7
 800337c:	0800339f 	.word	0x0800339f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003380:	f7ff fb32 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 8003384:	61b8      	str	r0, [r7, #24]
        break;
 8003386:	e013      	b.n	80033b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7ff fb50 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
 800338c:	61b8      	str	r0, [r7, #24]
        break;
 800338e:	e00f      	b.n	80033b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <UART_SetConfig+0x3a4>)
 8003392:	61bb      	str	r3, [r7, #24]
        break;
 8003394:	e00c      	b.n	80033b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003396:	f7ff fab1 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 800339a:	61b8      	str	r0, [r7, #24]
        break;
 800339c:	e008      	b.n	80033b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800339e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a2:	61bb      	str	r3, [r7, #24]
        break;
 80033a4:	e004      	b.n	80033b0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77bb      	strb	r3, [r7, #30]
        break;
 80033ae:	bf00      	nop
    }

    if (pclk != 0U)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d018      	beq.n	80033e8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	085a      	lsrs	r2, r3, #1
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	441a      	add	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b0f      	cmp	r3, #15
 80033ce:	d909      	bls.n	80033e4 <UART_SetConfig+0x388>
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d6:	d205      	bcs.n	80033e4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	b29a      	uxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	e001      	b.n	80033e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	007a1200 	.word	0x007a1200

08003404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01a      	beq.n	800351a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003502:	d10a      	bne.n	800351a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b098      	sub	sp, #96	; 0x60
 800354c:	af02      	add	r7, sp, #8
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003558:	f7fd fd54 	bl	8001004 <HAL_GetTick>
 800355c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d12e      	bne.n	80035ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800356c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003574:	2200      	movs	r2, #0
 8003576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f88c 	bl	8003698 <UART_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d021      	beq.n	80035ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800359a:	653b      	str	r3, [r7, #80]	; 0x50
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a4:	647b      	str	r3, [r7, #68]	; 0x44
 80035a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e6      	bne.n	8003586 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e062      	b.n	8003690 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d149      	bne.n	800366c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	2200      	movs	r2, #0
 80035e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f856 	bl	8003698 <UART_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d03c      	beq.n	800366c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
 8003612:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e6      	bne.n	80035f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60fb      	str	r3, [r7, #12]
   return(result);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3308      	adds	r3, #8
 8003642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003644:	61fa      	str	r2, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	617b      	str	r3, [r7, #20]
   return(result);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e011      	b.n	8003690 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3758      	adds	r7, #88	; 0x58
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a8:	e049      	b.n	800373e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d045      	beq.n	800373e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fd fca7 	bl	8001004 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e048      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d031      	beq.n	800373e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d110      	bne.n	800370a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2208      	movs	r2, #8
 80036ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f838 	bl	8003766 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2208      	movs	r2, #8
 80036fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e029      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003718:	d111      	bne.n	800373e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f81e 	bl	8003766 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e00f      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4013      	ands	r3, r2
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	429a      	cmp	r2, r3
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	429a      	cmp	r2, r3
 800375a:	d0a6      	beq.n	80036aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003766:	b480      	push	{r7}
 8003768:	b095      	sub	sp, #84	; 0x54
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378c:	643b      	str	r3, [r7, #64]	; 0x40
 800378e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e6      	bne.n	800376e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3308      	adds	r3, #8
 80037a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3308      	adds	r3, #8
 80037be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d118      	bne.n	800380e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 0310 	bic.w	r3, r3, #16
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	613b      	str	r3, [r7, #16]
   return(result);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e6      	bne.n	80037dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003822:	bf00      	nop
 8003824:	3754      	adds	r7, #84	; 0x54
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <memset>:
 800382e:	4402      	add	r2, r0
 8003830:	4603      	mov	r3, r0
 8003832:	4293      	cmp	r3, r2
 8003834:	d100      	bne.n	8003838 <memset+0xa>
 8003836:	4770      	bx	lr
 8003838:	f803 1b01 	strb.w	r1, [r3], #1
 800383c:	e7f9      	b.n	8003832 <memset+0x4>
	...

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4d0d      	ldr	r5, [pc, #52]	; (8003878 <__libc_init_array+0x38>)
 8003844:	4c0d      	ldr	r4, [pc, #52]	; (800387c <__libc_init_array+0x3c>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	2600      	movs	r6, #0
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	4d0b      	ldr	r5, [pc, #44]	; (8003880 <__libc_init_array+0x40>)
 8003852:	4c0c      	ldr	r4, [pc, #48]	; (8003884 <__libc_init_array+0x44>)
 8003854:	f000 f818 	bl	8003888 <_init>
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	2600      	movs	r6, #0
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	080038d8 	.word	0x080038d8
 800387c:	080038d8 	.word	0x080038d8
 8003880:	080038d8 	.word	0x080038d8
 8003884:	080038dc 	.word	0x080038dc

08003888 <_init>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr

08003894 <_fini>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	bf00      	nop
 8003898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389a:	bc08      	pop	{r3}
 800389c:	469e      	mov	lr, r3
 800389e:	4770      	bx	lr
