
bytebuddies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004000  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004194  08004194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041cc  080041cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080041cc  080041cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041cc  080041cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d3af  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019f1  00000000  00000000  0002d42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bd0  00000000  00000000  0002ee20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000094d  00000000  00000000  0002f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020739  00000000  00000000  0003033d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f4fc  00000000  00000000  00050a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9948  00000000  00000000  0005ff72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000031d8  00000000  00000000  001298bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012ca94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800417c 	.word	0x0800417c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800417c 	.word	0x0800417c

080001d4 <main>:
static void MX_TIM2_Init(void);
static void MX_UART4_Init(void);
uint8_t UART4_rxBuffer[4] = {0};

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

  HAL_Init();
 80001d8:	f000 fa92 	bl	8000700 <HAL_Init>


  SystemClock_Config();
 80001dc:	f000 f832 	bl	8000244 <SystemClock_Config>


  MX_GPIO_Init();
 80001e0:	f000 f944 	bl	800046c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e4:	f000 f890 	bl	8000308 <MX_TIM2_Init>
  MX_UART4_Init();
 80001e8:	f000 f910 	bl	800040c <MX_UART4_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001ec:	2100      	movs	r1, #0
 80001ee:	4812      	ldr	r0, [pc, #72]	; (8000238 <main+0x64>)
 80001f0:	f002 fabc 	bl	800276c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001f4:	2104      	movs	r1, #4
 80001f6:	4810      	ldr	r0, [pc, #64]	; (8000238 <main+0x64>)
 80001f8:	f002 fab8 	bl	800276c <HAL_TIM_PWM_Start>

  while (1)
  {
    HAL_UART_Receive (&huart4,  UART4_rxBuffer, 4, 10);
 80001fc:	230a      	movs	r3, #10
 80001fe:	2204      	movs	r2, #4
 8000200:	490e      	ldr	r1, [pc, #56]	; (800023c <main+0x68>)
 8000202:	480f      	ldr	r0, [pc, #60]	; (8000240 <main+0x6c>)
 8000204:	f003 fada 	bl	80037bc <HAL_UART_Receive>
    if(UART4_rxBuffer[0] == 1)
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <main+0x68>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d109      	bne.n	8000224 <main+0x50>
    {
    	htim2.Instance->CCR1 = 1500;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <main+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000218:	635a      	str	r2, [r3, #52]	; 0x34
    	htim2.Instance->CCR2 = 0;
 800021a:	4b07      	ldr	r3, [pc, #28]	; (8000238 <main+0x64>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2200      	movs	r2, #0
 8000220:	639a      	str	r2, [r3, #56]	; 0x38
 8000222:	e7eb      	b.n	80001fc <main+0x28>
    }

    else
    {
    	htim2.Instance->CCR1 = 0;
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <main+0x64>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2200      	movs	r2, #0
 800022a:	635a      	str	r2, [r3, #52]	; 0x34
    	htim2.Instance->CCR2 = 0;
 800022c:	4b02      	ldr	r3, [pc, #8]	; (8000238 <main+0x64>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2200      	movs	r2, #0
 8000232:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_UART_Receive (&huart4,  UART4_rxBuffer, 4, 10);
 8000234:	e7e2      	b.n	80001fc <main+0x28>
 8000236:	bf00      	nop
 8000238:	20000028 	.word	0x20000028
 800023c:	200000fc 	.word	0x200000fc
 8000240:	20000074 	.word	0x20000074

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b0a6      	sub	sp, #152	; 0x98
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f003 ff65 	bl	8004122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2258      	movs	r2, #88	; 0x58
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f003 ff57 	bl	8004122 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000274:	2302      	movs	r3, #2
 8000276:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2310      	movs	r3, #16
 800027e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800028c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL11;
 8000290:	f44f 1310 	mov.w	r3, #2359296	; 0x240000
 8000294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000298:	2301      	movs	r3, #1
 800029a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fd02 	bl	8000cac <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ae:	f000 f901 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002cc:	2101      	movs	r1, #1
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fd40 	bl	8001d54 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002da:	f000 f8eb 	bl	80004b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_TIM2;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <SystemClock_Config+0xc0>)
 80002e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002e6:	2300      	movs	r3, #0
 80002e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 ff67 	bl	80021c0 <HAL_RCCEx_PeriphCLKConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002f8:	f000 f8dc 	bl	80004b4 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3798      	adds	r7, #152	; 0x98
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	00100008 	.word	0x00100008

08000308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08e      	sub	sp, #56	; 0x38
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800031c:	f107 031c 	add.w	r3, r7, #28
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000328:	463b      	mov	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	615a      	str	r2, [r3, #20]
 8000338:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800033a:	4b33      	ldr	r3, [pc, #204]	; (8000408 <MX_TIM2_Init+0x100>)
 800033c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000340:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 880;
 8000342:	4b31      	ldr	r3, [pc, #196]	; (8000408 <MX_TIM2_Init+0x100>)
 8000344:	f44f 725c 	mov.w	r2, #880	; 0x370
 8000348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034a:	4b2f      	ldr	r3, [pc, #188]	; (8000408 <MX_TIM2_Init+0x100>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000350:	4b2d      	ldr	r3, [pc, #180]	; (8000408 <MX_TIM2_Init+0x100>)
 8000352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000356:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000358:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <MX_TIM2_Init+0x100>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035e:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <MX_TIM2_Init+0x100>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000364:	4828      	ldr	r0, [pc, #160]	; (8000408 <MX_TIM2_Init+0x100>)
 8000366:	f002 f949 	bl	80025fc <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000370:	f000 f8a0 	bl	80004b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000378:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037e:	4619      	mov	r1, r3
 8000380:	4821      	ldr	r0, [pc, #132]	; (8000408 <MX_TIM2_Init+0x100>)
 8000382:	f002 fc13 	bl	8002bac <HAL_TIM_ConfigClockSource>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800038c:	f000 f892 	bl	80004b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000390:	481d      	ldr	r0, [pc, #116]	; (8000408 <MX_TIM2_Init+0x100>)
 8000392:	f002 f98a 	bl	80026aa <HAL_TIM_PWM_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800039c:	f000 f88a 	bl	80004b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a4:	2300      	movs	r3, #0
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a8:	f107 031c 	add.w	r3, r7, #28
 80003ac:	4619      	mov	r1, r3
 80003ae:	4816      	ldr	r0, [pc, #88]	; (8000408 <MX_TIM2_Init+0x100>)
 80003b0:	f003 f92a 	bl	8003608 <HAL_TIMEx_MasterConfigSynchronization>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80003ba:	f000 f87b 	bl	80004b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003be:	2360      	movs	r3, #96	; 0x60
 80003c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	2200      	movs	r2, #0
 80003d2:	4619      	mov	r1, r3
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <MX_TIM2_Init+0x100>)
 80003d6:	f002 fad5 	bl	8002984 <HAL_TIM_PWM_ConfigChannel>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80003e0:	f000 f868 	bl	80004b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003e4:	463b      	mov	r3, r7
 80003e6:	2204      	movs	r2, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <MX_TIM2_Init+0x100>)
 80003ec:	f002 faca 	bl	8002984 <HAL_TIM_PWM_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80003f6:	f000 f85d 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003fa:	4803      	ldr	r0, [pc, #12]	; (8000408 <MX_TIM2_Init+0x100>)
 80003fc:	f000 f8a2 	bl	8000544 <HAL_TIM_MspPostInit>

}
 8000400:	bf00      	nop
 8000402:	3738      	adds	r7, #56	; 0x38
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000028 	.word	0x20000028

0800040c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000410:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_UART4_Init+0x58>)
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <MX_UART4_Init+0x5c>)
 8000414:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <MX_UART4_Init+0x58>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_UART4_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_UART4_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_UART4_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_UART4_Init+0x58>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_UART4_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_UART4_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_UART4_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_UART4_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_UART4_Init+0x58>)
 8000450:	f003 f966 	bl	8003720 <HAL_UART_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800045a:	f000 f82b 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000074 	.word	0x20000074
 8000468:	40004c00 	.word	0x40004c00

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_GPIO_Init+0x44>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <MX_GPIO_Init+0x44>)
 8000478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_GPIO_Init+0x44>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_GPIO_Init+0x44>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <MX_GPIO_Init+0x44>)
 8000490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_GPIO_Init+0x44>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	e7fe      	b.n	80004bc <Error_Handler+0x8>
	...

080004c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_MspInit+0x44>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <HAL_MspInit+0x44>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_MspInit+0x44>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <HAL_MspInit+0x44>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a08      	ldr	r2, [pc, #32]	; (8000504 <HAL_MspInit+0x44>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_MspInit+0x44>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000518:	d10b      	bne.n	8000532 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_TIM_Base_MspInit+0x38>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_TIM_Base_MspInit+0x38>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_TIM_Base_MspInit+0x38>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000564:	d11c      	bne.n	80005a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <HAL_TIM_MspPostInit+0x64>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <HAL_TIM_MspPostInit+0x64>)
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <HAL_TIM_MspPostInit+0x64>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800057e:	2303      	movs	r3, #3
 8000580:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800058e:	2301      	movs	r3, #1
 8000590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 f9fc 	bl	8000998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_UART_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d128      	bne.n	8000620 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <HAL_UART_MspInit+0x80>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <HAL_UART_MspInit+0x80>)
 80005d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <HAL_UART_MspInit+0x80>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_UART_MspInit+0x80>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <HAL_UART_MspInit+0x80>)
 80005ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_UART_MspInit+0x80>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80005fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000610:	2305      	movs	r3, #5
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_UART_MspInit+0x84>)
 800061c:	f000 f9bc 	bl	8000998 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40004c00 	.word	0x40004c00
 800062c:	40021000 	.word	0x40021000
 8000630:	48000800 	.word	0x48000800

08000634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000638:	e7fe      	b.n	8000638 <NMI_Handler+0x4>

0800063a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <HardFault_Handler+0x4>

08000640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <MemManage_Handler+0x4>

08000646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <UsageFault_Handler+0x4>

08000652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000680:	f000 f884 	bl	800078c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}

08000688 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <SystemInit+0x20>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <SystemInit+0x20>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b0:	f7ff ffea 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006da:	f003 fd2b 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006de:	f7ff fd79 	bl	80001d4 <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f0:	080041d4 	.word	0x080041d4
  ldr r2, =_sbss
 80006f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f8:	20000104 	.word	0x20000104

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_Init+0x28>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_Init+0x28>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000710:	2003      	movs	r0, #3
 8000712:	f000 f90d 	bl	8000930 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000716:	200f      	movs	r0, #15
 8000718:	f000 f808 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800071c:	f7ff fed0 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_InitTick+0x54>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	fbb3 f3f1 	udiv	r3, r3, r1
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f917 	bl	800097e <HAL_SYSTICK_Config>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e00e      	b.n	8000778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d80a      	bhi.n	8000776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f000 f8ed 	bl	8000946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_InitTick+0x5c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	e000      	b.n	8000778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	20000008 	.word	0x20000008
 8000788:	20000004 	.word	0x20000004

0800078c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_IncTick+0x20>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_IncTick+0x24>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_IncTick+0x24>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000100 	.word	0x20000100

080007b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_GetTick+0x14>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000100 	.word	0x20000100

080007cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	60d3      	str	r3, [r2, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <__NVIC_GetPriorityGrouping+0x18>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	f003 0307 	and.w	r3, r3, #7
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	; 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008fc:	d301      	bcc.n	8000902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fe:	2301      	movs	r3, #1
 8000900:	e00f      	b.n	8000922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <SysTick_Config+0x40>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090a:	210f      	movs	r1, #15
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f7ff ff8e 	bl	8000830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <SysTick_Config+0x40>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <SysTick_Config+0x40>)
 800091c:	2207      	movs	r2, #7
 800091e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	e000e010 	.word	0xe000e010

08000930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff47 	bl	80007cc <__NVIC_SetPriorityGrouping>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000958:	f7ff ff5c 	bl	8000814 <__NVIC_GetPriorityGrouping>
 800095c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	6978      	ldr	r0, [r7, #20]
 8000964:	f7ff ff8e 	bl	8000884 <NVIC_EncodePriority>
 8000968:	4602      	mov	r2, r0
 800096a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff5d 	bl	8000830 <__NVIC_SetPriority>
}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffb0 	bl	80008ec <SysTick_Config>
 800098c:	4603      	mov	r3, r0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a6:	e160      	b.n	8000c6a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	2101      	movs	r1, #1
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 8152 	beq.w	8000c64 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d005      	beq.n	80009d8 <HAL_GPIO_Init+0x40>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d130      	bne.n	8000a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68da      	ldr	r2, [r3, #12]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a0e:	2201      	movs	r2, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	091b      	lsrs	r3, r3, #4
 8000a24:	f003 0201 	and.w	r2, r3, #1
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d017      	beq.n	8000a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	2203      	movs	r2, #3
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d123      	bne.n	8000aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	08da      	lsrs	r2, r3, #3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3208      	adds	r2, #8
 8000a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	220f      	movs	r2, #15
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	f003 0307 	and.w	r3, r3, #7
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	08da      	lsrs	r2, r3, #3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3208      	adds	r2, #8
 8000ac4:	6939      	ldr	r1, [r7, #16]
 8000ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0203 	and.w	r2, r3, #3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 80ac 	beq.w	8000c64 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0c:	4b5e      	ldr	r3, [pc, #376]	; (8000c88 <HAL_GPIO_Init+0x2f0>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a5d      	ldr	r2, [pc, #372]	; (8000c88 <HAL_GPIO_Init+0x2f0>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <HAL_GPIO_Init+0x2f0>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b24:	4a59      	ldr	r2, [pc, #356]	; (8000c8c <HAL_GPIO_Init+0x2f4>)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b4e:	d025      	beq.n	8000b9c <HAL_GPIO_Init+0x204>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a4f      	ldr	r2, [pc, #316]	; (8000c90 <HAL_GPIO_Init+0x2f8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d01f      	beq.n	8000b98 <HAL_GPIO_Init+0x200>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a4e      	ldr	r2, [pc, #312]	; (8000c94 <HAL_GPIO_Init+0x2fc>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d019      	beq.n	8000b94 <HAL_GPIO_Init+0x1fc>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a4d      	ldr	r2, [pc, #308]	; (8000c98 <HAL_GPIO_Init+0x300>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d013      	beq.n	8000b90 <HAL_GPIO_Init+0x1f8>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a4c      	ldr	r2, [pc, #304]	; (8000c9c <HAL_GPIO_Init+0x304>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d00d      	beq.n	8000b8c <HAL_GPIO_Init+0x1f4>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a4b      	ldr	r2, [pc, #300]	; (8000ca0 <HAL_GPIO_Init+0x308>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d007      	beq.n	8000b88 <HAL_GPIO_Init+0x1f0>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a4a      	ldr	r2, [pc, #296]	; (8000ca4 <HAL_GPIO_Init+0x30c>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d101      	bne.n	8000b84 <HAL_GPIO_Init+0x1ec>
 8000b80:	2306      	movs	r3, #6
 8000b82:	e00c      	b.n	8000b9e <HAL_GPIO_Init+0x206>
 8000b84:	2307      	movs	r3, #7
 8000b86:	e00a      	b.n	8000b9e <HAL_GPIO_Init+0x206>
 8000b88:	2305      	movs	r3, #5
 8000b8a:	e008      	b.n	8000b9e <HAL_GPIO_Init+0x206>
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	e006      	b.n	8000b9e <HAL_GPIO_Init+0x206>
 8000b90:	2303      	movs	r3, #3
 8000b92:	e004      	b.n	8000b9e <HAL_GPIO_Init+0x206>
 8000b94:	2302      	movs	r3, #2
 8000b96:	e002      	b.n	8000b9e <HAL_GPIO_Init+0x206>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <HAL_GPIO_Init+0x206>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	f002 0203 	and.w	r2, r2, #3
 8000ba4:	0092      	lsls	r2, r2, #2
 8000ba6:	4093      	lsls	r3, r2
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bae:	4937      	ldr	r1, [pc, #220]	; (8000c8c <HAL_GPIO_Init+0x2f4>)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <HAL_GPIO_Init+0x310>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be0:	4a31      	ldr	r2, [pc, #196]	; (8000ca8 <HAL_GPIO_Init+0x310>)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <HAL_GPIO_Init+0x310>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0a:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <HAL_GPIO_Init+0x310>)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <HAL_GPIO_Init+0x310>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_GPIO_Init+0x310>)
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_GPIO_Init+0x310>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <HAL_GPIO_Init+0x310>)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3301      	adds	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa22 f303 	lsr.w	r3, r2, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f47f ae97 	bne.w	80009a8 <HAL_GPIO_Init+0x10>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	371c      	adds	r7, #28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	48000400 	.word	0x48000400
 8000c94:	48000800 	.word	0x48000800
 8000c98:	48000c00 	.word	0x48000c00
 8000c9c:	48001000 	.word	0x48001000
 8000ca0:	48001400 	.word	0x48001400
 8000ca4:	48001800 	.word	0x48001800
 8000ca8:	40010400 	.word	0x40010400

08000cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cbc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f001 b83a 	b.w	8001d46 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 816f 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ce8:	4bb5      	ldr	r3, [pc, #724]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 030c 	and.w	r3, r3, #12
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d00c      	beq.n	8000d0e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf4:	4bb2      	ldr	r3, [pc, #712]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d15c      	bne.n	8000dba <HAL_RCC_OscConfig+0x10e>
 8000d00:	4baf      	ldr	r3, [pc, #700]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0c:	d155      	bne.n	8000dba <HAL_RCC_OscConfig+0x10e>
 8000d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d26:	fab3 f383 	clz	r3, r3
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	095b      	lsrs	r3, r3, #5
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d102      	bne.n	8000d40 <HAL_RCC_OscConfig+0x94>
 8000d3a:	4ba1      	ldr	r3, [pc, #644]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	e015      	b.n	8000d6c <HAL_RCC_OscConfig+0xc0>
 8000d40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d44:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d4c:	fa93 f3a3 	rbit	r3, r3
 8000d50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d58:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d5c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d60:	fa93 f3a3 	rbit	r3, r3
 8000d64:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d68:	4b95      	ldr	r3, [pc, #596]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d70:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d74:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d78:	fa92 f2a2 	rbit	r2, r2
 8000d7c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000d80:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	f042 0220 	orr.w	r2, r2, #32
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	f002 021f 	and.w	r2, r2, #31
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f000 8111 	beq.w	8000fc4 <HAL_RCC_OscConfig+0x318>
 8000da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000da6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 8108 	bne.w	8000fc4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f000 bfc6 	b.w	8001d46 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dca:	d106      	bne.n	8000dda <HAL_RCC_OscConfig+0x12e>
 8000dcc:	4b7c      	ldr	r3, [pc, #496]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a7b      	ldr	r2, [pc, #492]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e036      	b.n	8000e48 <HAL_RCC_OscConfig+0x19c>
 8000dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x158>
 8000dea:	4b75      	ldr	r3, [pc, #468]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a74      	ldr	r2, [pc, #464]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b72      	ldr	r3, [pc, #456]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a71      	ldr	r2, [pc, #452]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e021      	b.n	8000e48 <HAL_RCC_OscConfig+0x19c>
 8000e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e14:	d10c      	bne.n	8000e30 <HAL_RCC_OscConfig+0x184>
 8000e16:	4b6a      	ldr	r3, [pc, #424]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a69      	ldr	r2, [pc, #420]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	4b67      	ldr	r3, [pc, #412]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a66      	ldr	r2, [pc, #408]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e00b      	b.n	8000e48 <HAL_RCC_OscConfig+0x19c>
 8000e30:	4b63      	ldr	r3, [pc, #396]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a62      	ldr	r2, [pc, #392]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b60      	ldr	r3, [pc, #384]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a5f      	ldr	r2, [pc, #380]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e46:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d059      	beq.n	8000f0c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fcac 	bl	80007b4 <HAL_GetTick>
 8000e5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e60:	e00a      	b.n	8000e78 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e62:	f7ff fca7 	bl	80007b4 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d902      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	f000 bf67 	b.w	8001d46 <HAL_RCC_OscConfig+0x109a>
 8000e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e80:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000e8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	fab3 f383 	clz	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d102      	bne.n	8000eaa <HAL_RCC_OscConfig+0x1fe>
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x22a>
 8000eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ec6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000eca:	fa93 f3a3 	rbit	r3, r3
 8000ece:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eda:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ede:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ee2:	fa92 f2a2 	rbit	r2, r2
 8000ee6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000eea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000eee:	fab2 f282 	clz	r2, r2
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	f042 0220 	orr.w	r2, r2, #32
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	f002 021f 	and.w	r2, r2, #31
 8000efe:	2101      	movs	r1, #1
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0ab      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1b6>
 8000f0a:	e05c      	b.n	8000fc6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fc52 	bl	80007b4 <HAL_GetTick>
 8000f10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f14:	e00a      	b.n	8000f2c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f16:	f7ff fc4d 	bl	80007b4 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d902      	bls.n	8000f2c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	f000 bf0d 	b.w	8001d46 <HAL_RCC_OscConfig+0x109a>
 8000f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f30:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f38:	fa93 f3a3 	rbit	r3, r3
 8000f3c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f40:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d102      	bne.n	8000f5e <HAL_RCC_OscConfig+0x2b2>
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	e015      	b.n	8000f8a <HAL_RCC_OscConfig+0x2de>
 8000f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f6a:	fa93 f3a3 	rbit	r3, r3
 8000f6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f7e:	fa93 f3a3 	rbit	r3, r3
 8000f82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_RCC_OscConfig+0x314>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f8e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f92:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f96:	fa92 f2a2 	rbit	r2, r2
 8000f9a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000f9e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fa2:	fab2 f282 	clz	r2, r2
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	f042 0220 	orr.w	r2, r2, #32
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	f002 021f 	and.w	r2, r2, #31
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1ab      	bne.n	8000f16 <HAL_RCC_OscConfig+0x26a>
 8000fbe:	e002      	b.n	8000fc6 <HAL_RCC_OscConfig+0x31a>
 8000fc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 817f 	beq.w	80012da <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fdc:	4ba7      	ldr	r3, [pc, #668]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00c      	beq.n	8001002 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe8:	4ba4      	ldr	r3, [pc, #656]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d173      	bne.n	80010dc <HAL_RCC_OscConfig+0x430>
 8000ff4:	4ba1      	ldr	r3, [pc, #644]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001000:	d16c      	bne.n	80010dc <HAL_RCC_OscConfig+0x430>
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001008:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800100c:	fa93 f3a3 	rbit	r3, r3
 8001010:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001014:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001018:	fab3 f383 	clz	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d102      	bne.n	8001032 <HAL_RCC_OscConfig+0x386>
 800102c:	4b93      	ldr	r3, [pc, #588]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	e013      	b.n	800105a <HAL_RCC_OscConfig+0x3ae>
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800104a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001056:	4b89      	ldr	r3, [pc, #548]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2202      	movs	r2, #2
 800105c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001060:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001064:	fa92 f2a2 	rbit	r2, r2
 8001068:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800106c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001070:	fab2 f282 	clz	r2, r2
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f002 021f 	and.w	r2, r2, #31
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00a      	beq.n	80010a2 <HAL_RCC_OscConfig+0x3f6>
 800108c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001090:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d002      	beq.n	80010a2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	f000 be52 	b.w	8001d46 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b76      	ldr	r3, [pc, #472]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	21f8      	movs	r1, #248	; 0xf8
 80010b8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010c0:	fa91 f1a1 	rbit	r1, r1
 80010c4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010c8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010cc:	fab1 f181 	clz	r1, r1
 80010d0:	b2c9      	uxtb	r1, r1
 80010d2:	408b      	lsls	r3, r1
 80010d4:	4969      	ldr	r1, [pc, #420]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	e0fe      	b.n	80012da <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 8088 	beq.w	80011fe <HAL_RCC_OscConfig+0x552>
 80010ee:	2301      	movs	r3, #1
 80010f0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001100:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	fab3 f383 	clz	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800110e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	461a      	mov	r2, r3
 8001116:	2301      	movs	r3, #1
 8001118:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fb4b 	bl	80007b4 <HAL_GetTick>
 800111e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001122:	e00a      	b.n	800113a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001124:	f7ff fb46 	bl	80007b4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d902      	bls.n	800113a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	f000 be06 	b.w	8001d46 <HAL_RCC_OscConfig+0x109a>
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800114c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <HAL_RCC_OscConfig+0x4be>
 8001164:	4b45      	ldr	r3, [pc, #276]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	e013      	b.n	8001192 <HAL_RCC_OscConfig+0x4e6>
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001182:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	2202      	movs	r2, #2
 8001194:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001198:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800119c:	fa92 f2a2 	rbit	r2, r2
 80011a0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011a8:	fab2 f282 	clz	r2, r2
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	f042 0220 	orr.w	r2, r2, #32
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	f002 021f 	and.w	r2, r2, #31
 80011b8:	2101      	movs	r1, #1
 80011ba:	fa01 f202 	lsl.w	r2, r1, r2
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0af      	beq.n	8001124 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	21f8      	movs	r1, #248	; 0xf8
 80011da:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80011e2:	fa91 f1a1 	rbit	r1, r1
 80011e6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80011ea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011ee:	fab1 f181 	clz	r1, r1
 80011f2:	b2c9      	uxtb	r1, r1
 80011f4:	408b      	lsls	r3, r1
 80011f6:	4921      	ldr	r1, [pc, #132]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
 80011fc:	e06d      	b.n	80012da <HAL_RCC_OscConfig+0x62e>
 80011fe:	2301      	movs	r3, #1
 8001200:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001210:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800121e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	461a      	mov	r2, r3
 8001226:	2300      	movs	r3, #0
 8001228:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fac3 	bl	80007b4 <HAL_GetTick>
 800122e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	e00a      	b.n	800124a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fabe 	bl	80007b4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d902      	bls.n	800124a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	f000 bd7e 	b.w	8001d46 <HAL_RCC_OscConfig+0x109a>
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800125c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <HAL_RCC_OscConfig+0x5d4>
 8001274:	4b01      	ldr	r3, [pc, #4]	; (800127c <HAL_RCC_OscConfig+0x5d0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	e016      	b.n	80012a8 <HAL_RCC_OscConfig+0x5fc>
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800128a:	fa93 f3a3 	rbit	r3, r3
 800128e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001298:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800129c:	fa93 f3a3 	rbit	r3, r3
 80012a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012a4:	4bbf      	ldr	r3, [pc, #764]	; (80015a4 <HAL_RCC_OscConfig+0x8f8>)
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	2202      	movs	r2, #2
 80012aa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012b2:	fa92 f2a2 	rbit	r2, r2
 80012b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012be:	fab2 f282 	clz	r2, r2
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	f042 0220 	orr.w	r2, r2, #32
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	f002 021f 	and.w	r2, r2, #31
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ac      	bne.n	8001234 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8113 	beq.w	8001516 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d07c      	beq.n	80013fa <HAL_RCC_OscConfig+0x74e>
 8001300:	2301      	movs	r3, #1
 8001302:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001312:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	4ba2      	ldr	r3, [pc, #648]	; (80015a8 <HAL_RCC_OscConfig+0x8fc>)
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	461a      	mov	r2, r3
 8001326:	2301      	movs	r3, #1
 8001328:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fa43 	bl	80007b4 <HAL_GetTick>
 800132e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	e00a      	b.n	800134a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fa3e 	bl	80007b4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d902      	bls.n	800134a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	f000 bcfe 	b.w	8001d46 <HAL_RCC_OscConfig+0x109a>
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001354:	fa93 f2a3 	rbit	r2, r3
 8001358:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800135c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800136a:	2202      	movs	r2, #2
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800138e:	2202      	movs	r2, #2
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001396:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	fa93 f2a3 	rbit	r2, r3
 80013a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <HAL_RCC_OscConfig+0x8f8>)
 80013ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013b6:	2102      	movs	r1, #2
 80013b8:	6019      	str	r1, [r3, #0]
 80013ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fa93 f1a3 	rbit	r1, r3
 80013c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013d0:	6019      	str	r1, [r3, #0]
  return result;
 80013d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2101      	movs	r1, #1
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d09d      	beq.n	8001334 <HAL_RCC_OscConfig+0x688>
 80013f8:	e08d      	b.n	8001516 <HAL_RCC_OscConfig+0x86a>
 80013fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800140a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	fa93 f2a3 	rbit	r2, r3
 8001414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001418:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800141c:	601a      	str	r2, [r3, #0]
  return result;
 800141e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001422:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001426:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	4b5d      	ldr	r3, [pc, #372]	; (80015a8 <HAL_RCC_OscConfig+0x8fc>)
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	461a      	mov	r2, r3
 8001438:	2300      	movs	r3, #0
 800143a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff f9ba 	bl	80007b4 <HAL_GetTick>
 8001440:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff f9b5 	bl	80007b4 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d902      	bls.n	800145c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	f000 bc75 	b.w	8001d46 <HAL_RCC_OscConfig+0x109a>
 800145c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001460:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001464:	2202      	movs	r2, #2
 8001466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fa93 f2a3 	rbit	r2, r3
 8001476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001488:	2202      	movs	r2, #2
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014ac:	2202      	movs	r2, #2
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_RCC_OscConfig+0x8f8>)
 80014ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014d4:	2102      	movs	r1, #2
 80014d6:	6019      	str	r1, [r3, #0]
 80014d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fa93 f1a3 	rbit	r1, r3
 80014e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014ee:	6019      	str	r1, [r3, #0]
  return result;
 80014f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d197      	bne.n	8001446 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 81a5 	beq.w	8001876 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_RCC_OscConfig+0x8f8>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_OscConfig+0x8f8>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_RCC_OscConfig+0x8f8>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_RCC_OscConfig+0x8f8>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001564:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_RCC_OscConfig+0x900>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d121      	bne.n	80015bc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_RCC_OscConfig+0x900>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_RCC_OscConfig+0x900>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001582:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001584:	f7ff f916 	bl	80007b4 <HAL_GetTick>
 8001588:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	e010      	b.n	80015b0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff f911 	bl	80007b4 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d908      	bls.n	80015b0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e3d1      	b.n	8001d46 <HAL_RCC_OscConfig+0x109a>
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	10908120 	.word	0x10908120
 80015ac:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4b8d      	ldr	r3, [pc, #564]	; (80017e8 <HAL_RCC_OscConfig+0xb3c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0e8      	beq.n	800158e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x92e>
 80015cc:	4b87      	ldr	r3, [pc, #540]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a86      	ldr	r2, [pc, #536]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	e035      	b.n	8001646 <HAL_RCC_OscConfig+0x99a>
 80015da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x958>
 80015ea:	4b80      	ldr	r3, [pc, #512]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a7f      	ldr	r2, [pc, #508]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a7c      	ldr	r2, [pc, #496]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	e020      	b.n	8001646 <HAL_RCC_OscConfig+0x99a>
 8001604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001608:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d10c      	bne.n	800162e <HAL_RCC_OscConfig+0x982>
 8001614:	4b75      	ldr	r3, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a74      	ldr	r2, [pc, #464]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	4b72      	ldr	r3, [pc, #456]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a71      	ldr	r2, [pc, #452]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	e00b      	b.n	8001646 <HAL_RCC_OscConfig+0x99a>
 800162e:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a6e      	ldr	r2, [pc, #440]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	4b6c      	ldr	r3, [pc, #432]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a6b      	ldr	r2, [pc, #428]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8081 	beq.w	800175a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff f8ac 	bl	80007b4 <HAL_GetTick>
 800165c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00b      	b.n	800167a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff f8a7 	bl	80007b4 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e365      	b.n	8001d46 <HAL_RCC_OscConfig+0x109a>
 800167a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001682:	2202      	movs	r2, #2
 8001684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001698:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016a6:	2202      	movs	r2, #2
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	fa93 f2a3 	rbit	r2, r3
 80016b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016c0:	601a      	str	r2, [r3, #0]
  return result;
 80016c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_OscConfig+0xa3a>
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	e013      	b.n	800170e <HAL_RCC_OscConfig+0xa62>
 80016e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001704:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001712:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001716:	2102      	movs	r1, #2
 8001718:	6011      	str	r1, [r2, #0]
 800171a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800171e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	fa92 f1a2 	rbit	r1, r2
 8001728:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800172c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001730:	6011      	str	r1, [r2, #0]
  return result;
 8001732:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001736:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	fab2 f282 	clz	r2, r2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f002 021f 	and.w	r2, r2, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d084      	beq.n	8001662 <HAL_RCC_OscConfig+0x9b6>
 8001758:	e083      	b.n	8001862 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff f82b 	bl	80007b4 <HAL_GetTick>
 800175e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff f826 	bl	80007b4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	; 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e2e4      	b.n	8001d46 <HAL_RCC_OscConfig+0x109a>
 800177c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001780:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001784:	2202      	movs	r2, #2
 8001786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f2a3 	rbit	r2, r3
 8001796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017a8:	2202      	movs	r2, #2
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fa93 f2a3 	rbit	r2, r3
 80017ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017c2:	601a      	str	r2, [r3, #0]
  return result;
 80017c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d106      	bne.n	80017f0 <HAL_RCC_OscConfig+0xb44>
 80017e2:	4b02      	ldr	r3, [pc, #8]	; (80017ec <HAL_RCC_OscConfig+0xb40>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	e017      	b.n	8001818 <HAL_RCC_OscConfig+0xb6c>
 80017e8:	40007000 	.word	0x40007000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017f8:	2202      	movs	r2, #2
 80017fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001800:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	4bb3      	ldr	r3, [pc, #716]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800181c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001820:	2102      	movs	r1, #2
 8001822:	6011      	str	r1, [r2, #0]
 8001824:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001828:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	fa92 f1a2 	rbit	r1, r2
 8001832:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001836:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800183a:	6011      	str	r1, [r2, #0]
  return result;
 800183c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001840:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	fab2 f282 	clz	r2, r2
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	f002 021f 	and.w	r2, r2, #31
 8001856:	2101      	movs	r1, #1
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d180      	bne.n	8001764 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001862:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001866:	2b01      	cmp	r3, #1
 8001868:	d105      	bne.n	8001876 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186a:	4b9e      	ldr	r3, [pc, #632]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a9d      	ldr	r2, [pc, #628]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 8001870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 825e 	beq.w	8001d44 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4b96      	ldr	r3, [pc, #600]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	f000 821f 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	f040 8170 	bne.w	8001b88 <HAL_RCC_OscConfig+0xedc>
 80018a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018cc:	601a      	str	r2, [r3, #0]
  return result;
 80018ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018d6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	461a      	mov	r2, r3
 80018ea:	2300      	movs	r3, #0
 80018ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7fe ff61 	bl	80007b4 <HAL_GetTick>
 80018f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f6:	e009      	b.n	800190c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7fe ff5c 	bl	80007b4 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e21c      	b.n	8001d46 <HAL_RCC_OscConfig+0x109a>
 800190c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001910:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001930:	601a      	str	r2, [r3, #0]
  return result;
 8001932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001936:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800193a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d102      	bne.n	8001956 <HAL_RCC_OscConfig+0xcaa>
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e027      	b.n	80019a6 <HAL_RCC_OscConfig+0xcfa>
 8001956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800195e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001968:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001980:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fa93 f2a3 	rbit	r2, r3
 8001998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019aa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019b2:	6011      	str	r1, [r2, #0]
 80019b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	fa92 f1a2 	rbit	r1, r2
 80019c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019c6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019ca:	6011      	str	r1, [r2, #0]
  return result;
 80019cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019d0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	fab2 f282 	clz	r2, r2
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f042 0220 	orr.w	r2, r2, #32
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f002 021f 	and.w	r2, r2, #31
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d182      	bne.n	80018f8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f2:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f023 020f 	bic.w	r2, r3, #15
 80019fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	4937      	ldr	r1, [pc, #220]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a0c:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a19      	ldr	r1, [r3, #32]
 8001a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	492d      	ldr	r1, [pc, #180]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a38:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a54:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a58:	601a      	str	r2, [r3, #0]
  return result;
 8001a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a62:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	461a      	mov	r2, r3
 8001a76:	2301      	movs	r3, #1
 8001a78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7fe fe9b 	bl	80007b4 <HAL_GetTick>
 8001a7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a82:	e009      	b.n	8001a98 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7fe fe96 	bl	80007b4 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e156      	b.n	8001d46 <HAL_RCC_OscConfig+0x109a>
 8001a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001aa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aaa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fa93 f2a3 	rbit	r2, r3
 8001ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001abc:	601a      	str	r2, [r3, #0]
  return result;
 8001abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xe3c>
 8001adc:	4b01      	ldr	r3, [pc, #4]	; (8001ae4 <HAL_RCC_OscConfig+0xe38>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	e02a      	b.n	8001b38 <HAL_RCC_OscConfig+0xe8c>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b08:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b12:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b20:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	fa93 f2a3 	rbit	r2, r3
 8001b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	4b86      	ldr	r3, [pc, #536]	; (8001d50 <HAL_RCC_OscConfig+0x10a4>)
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b3c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b44:	6011      	str	r1, [r2, #0]
 8001b46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b4a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	fa92 f1a2 	rbit	r1, r2
 8001b54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b58:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b5c:	6011      	str	r1, [r2, #0]
  return result;
 8001b5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b62:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fab2 f282 	clz	r2, r2
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0220 	orr.w	r2, r2, #32
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f43f af7f 	beq.w	8001a84 <HAL_RCC_OscConfig+0xdd8>
 8001b86:	e0dd      	b.n	8001d44 <HAL_RCC_OscConfig+0x1098>
 8001b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bac:	601a      	str	r2, [r3, #0]
  return result;
 8001bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bb6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2300      	movs	r3, #0
 8001bcc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7fe fdf1 	bl	80007b4 <HAL_GetTick>
 8001bd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd6:	e009      	b.n	8001bec <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7fe fdec 	bl	80007b4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0ac      	b.n	8001d46 <HAL_RCC_OscConfig+0x109a>
 8001bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c10:	601a      	str	r2, [r3, #0]
  return result;
 8001c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c16:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_OscConfig+0xf8a>
 8001c30:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_OscConfig+0x10a4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	e027      	b.n	8001c86 <HAL_RCC_OscConfig+0xfda>
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c56:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c60:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fa93 f2a3 	rbit	r2, r3
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <HAL_RCC_OscConfig+0x10a4>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c8a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c92:	6011      	str	r1, [r2, #0]
 8001c94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c98:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	fa92 f1a2 	rbit	r1, r2
 8001ca2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ca6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001caa:	6011      	str	r1, [r2, #0]
  return result;
 8001cac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	fab2 f282 	clz	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f042 0220 	orr.w	r2, r2, #32
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f002 021f 	and.w	r2, r2, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d182      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xf2c>
 8001cd2:	e037      	b.n	8001d44 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e02e      	b.n	8001d46 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_OscConfig+0x10a4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_RCC_OscConfig+0x10a4>)
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cf8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cfc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d117      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d14:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d10b      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d2c:	f003 020f 	and.w	r2, r3, #15
 8001d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000

08001d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b09e      	sub	sp, #120	; 0x78
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e162      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b90      	ldr	r3, [pc, #576]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b8d      	ldr	r3, [pc, #564]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	498b      	ldr	r1, [pc, #556]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e14a      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b82      	ldr	r3, [pc, #520]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	497f      	ldr	r1, [pc, #508]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80dc 	beq.w	8001f80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d13c      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xf6>
 8001dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xa6>
 8001df4:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e00f      	b.n	8001e1a <HAL_RCC_ClockConfig+0xc6>
 8001dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	667b      	str	r3, [r7, #100]	; 0x64
 8001e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e16:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e22:	fa92 f2a2 	rbit	r2, r2
 8001e26:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e2a:	fab2 f282 	clz	r2, r2
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f042 0220 	orr.w	r2, r2, #32
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f002 021f 	and.w	r2, r2, #31
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d17b      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0f3      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d13c      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x178>
 8001e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x128>
 8001e76:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e00f      	b.n	8001e9c <HAL_RCC_ClockConfig+0x148>
 8001e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e98:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea4:	fa92 f2a2 	rbit	r2, r2
 8001ea8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d13a      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b2      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1a0>
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e00d      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1bc>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	2302      	movs	r3, #2
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2202      	movs	r2, #2
 8001f12:	61ba      	str	r2, [r7, #24]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	fa92 f2a2 	rbit	r2, r2
 8001f1a:	617a      	str	r2, [r7, #20]
  return result;
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f042 0220 	orr.w	r2, r2, #32
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f002 021f 	and.w	r2, r2, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e079      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	491a      	ldr	r1, [pc, #104]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fc30 	bl	80007b4 <HAL_GetTick>
 8001f54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fc2c 	bl	80007b4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e061      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d214      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4906      	ldr	r1, [pc, #24]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e040      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	491a      	ldr	r1, [pc, #104]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4912      	ldr	r1, [pc, #72]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ff6:	f000 f829 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4601      	mov	r1, r0
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002004:	22f0      	movs	r2, #240	; 0xf0
 8002006:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	fa92 f2a2 	rbit	r2, r2
 800200e:	60fa      	str	r2, [r7, #12]
  return result;
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	fab2 f282 	clz	r2, r2
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	40d3      	lsrs	r3, r2
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x2ec>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	fa21 f303 	lsr.w	r3, r1, r3
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_RCC_ClockConfig+0x2f0>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_RCC_ClockConfig+0x2f4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fb7e 	bl	800072c <HAL_InitTick>
  
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3778      	adds	r7, #120	; 0x78
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	08004194 	.word	0x08004194
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	; 0x2c
 8002050:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x30>
 8002076:	2b08      	cmp	r3, #8
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x36>
 800207a:	e03f      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCC_GetSysClockFreq+0xc8>)
 800207e:	623b      	str	r3, [r7, #32]
      break;
 8002080:	e03f      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002088:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800208c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	fa92 f2a2 	rbit	r2, r2
 8002094:	607a      	str	r2, [r7, #4]
  return result;
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	40d3      	lsrs	r3, r2
 80020a0:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	220f      	movs	r2, #15
 80020b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	fa92 f2a2 	rbit	r2, r2
 80020b8:	60fa      	str	r2, [r7, #12]
  return result;
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	fab2 f282 	clz	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	40d3      	lsrs	r3, r2
 80020c4:	4a15      	ldr	r2, [pc, #84]	; (800211c <HAL_RCC_GetSysClockFreq+0xd0>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d4:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	e007      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fb02 f303 	mul.w	r3, r2, r3
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	623b      	str	r3, [r7, #32]
      break;
 80020fa:	e002      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020fe:	623b      	str	r3, [r7, #32]
      break;
 8002100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002102:	6a3b      	ldr	r3, [r7, #32]
}
 8002104:	4618      	mov	r0, r3
 8002106:	372c      	adds	r7, #44	; 0x2c
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40021000 	.word	0x40021000
 8002114:	007a1200 	.word	0x007a1200
 8002118:	080041ac 	.word	0x080041ac
 800211c:	080041bc 	.word	0x080041bc

08002120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_GetHCLKFreq+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000000 	.word	0x20000000

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800213e:	f7ff ffef 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002142:	4601      	mov	r1, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800214c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002150:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	fa92 f2a2 	rbit	r2, r2
 8002158:	603a      	str	r2, [r7, #0]
  return result;
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	40d3      	lsrs	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	080041a4 	.word	0x080041a4

0800217c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002182:	f7ff ffcd 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002186:	4601      	mov	r1, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002190:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002194:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	fa92 f2a2 	rbit	r2, r2
 800219c:	603a      	str	r2, [r7, #0]
  return result;
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	fab2 f282 	clz	r2, r2
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	40d3      	lsrs	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	080041a4 	.word	0x080041a4

080021c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b092      	sub	sp, #72	; 0x48
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80d4 	beq.w	800238c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e4:	4b4e      	ldr	r3, [pc, #312]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10e      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f0:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a4a      	ldr	r2, [pc, #296]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fa:	61d3      	str	r3, [r2, #28]
 80021fc:	4b48      	ldr	r3, [pc, #288]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002208:	2301      	movs	r3, #1
 800220a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b45      	ldr	r3, [pc, #276]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b42      	ldr	r3, [pc, #264]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a41      	ldr	r2, [pc, #260]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe fac5 	bl	80007b4 <HAL_GetTick>
 800222a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fac1 	bl	80007b4 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e1d6      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b38      	ldr	r3, [pc, #224]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8084 	beq.w	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002266:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002268:	429a      	cmp	r2, r3
 800226a:	d07c      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	461a      	mov	r2, r3
 8002296:	2301      	movs	r3, #1
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	461a      	mov	r2, r3
 80022ba:	2300      	movs	r3, #0
 80022bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022be:	4a18      	ldr	r2, [pc, #96]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d04b      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe fa71 	bl	80007b4 <HAL_GetTick>
 80022d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7fe fa6d 	bl	80007b4 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e180      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80022ec:	2302      	movs	r3, #2
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
 80022f8:	2302      	movs	r3, #2
 80022fa:	623b      	str	r3, [r7, #32]
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	61fb      	str	r3, [r7, #28]
  return result;
 8002304:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d108      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800231a:	4b01      	ldr	r3, [pc, #4]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	e00d      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
 8002328:	10908100 	.word	0x10908100
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	4b9a      	ldr	r3, [pc, #616]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2202      	movs	r2, #2
 800233e:	613a      	str	r2, [r7, #16]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	fa92 f2a2 	rbit	r2, r2
 8002346:	60fa      	str	r2, [r7, #12]
  return result;
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0b7      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002366:	4b8f      	ldr	r3, [pc, #572]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	498c      	ldr	r1, [pc, #560]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002374:	4313      	orrs	r3, r2
 8002376:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002378:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a87      	ldr	r2, [pc, #540]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002398:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f023 0203 	bic.w	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	497f      	ldr	r1, [pc, #508]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023b6:	4b7b      	ldr	r3, [pc, #492]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	4978      	ldr	r1, [pc, #480]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023d4:	4b73      	ldr	r3, [pc, #460]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4970      	ldr	r1, [pc, #448]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023f2:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f023 0210 	bic.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4969      	ldr	r1, [pc, #420]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002410:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	4961      	ldr	r1, [pc, #388]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800242e:	4b5d      	ldr	r3, [pc, #372]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f023 0220 	bic.w	r2, r3, #32
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	495a      	ldr	r1, [pc, #360]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800244c:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	4952      	ldr	r1, [pc, #328]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800246a:	4b4e      	ldr	r3, [pc, #312]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	494b      	ldr	r1, [pc, #300]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002488:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4943      	ldr	r1, [pc, #268]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	493c      	ldr	r1, [pc, #240]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024c4:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	4934      	ldr	r1, [pc, #208]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	492d      	ldr	r1, [pc, #180]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	4925      	ldr	r1, [pc, #148]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	491e      	ldr	r1, [pc, #120]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	4916      	ldr	r1, [pc, #88]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	490f      	ldr	r1, [pc, #60]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002586:	4313      	orrs	r3, r2
 8002588:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00c      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002596:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	e002      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025aa:	4913      	ldr	r1, [pc, #76]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	490b      	ldr	r1, [pc, #44]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e6:	4904      	ldr	r1, [pc, #16]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3748      	adds	r7, #72	; 0x48
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e049      	b.n	80026a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fd ff70 	bl	8000508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 fb80 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e049      	b.n	8002750 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f841 	bl	8002758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	4619      	mov	r1, r3
 80026e8:	4610      	mov	r0, r2
 80026ea:	f000 fb29 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <HAL_TIM_PWM_Start+0x24>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e03c      	b.n	800280a <HAL_TIM_PWM_Start+0x9e>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d109      	bne.n	80027aa <HAL_TIM_PWM_Start+0x3e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e02f      	b.n	800280a <HAL_TIM_PWM_Start+0x9e>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d109      	bne.n	80027c4 <HAL_TIM_PWM_Start+0x58>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e022      	b.n	800280a <HAL_TIM_PWM_Start+0x9e>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d109      	bne.n	80027de <HAL_TIM_PWM_Start+0x72>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	bf14      	ite	ne
 80027d6:	2301      	movne	r3, #1
 80027d8:	2300      	moveq	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e015      	b.n	800280a <HAL_TIM_PWM_Start+0x9e>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d109      	bne.n	80027f8 <HAL_TIM_PWM_Start+0x8c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e008      	b.n	800280a <HAL_TIM_PWM_Start+0x9e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0a1      	b.n	8002956 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <HAL_TIM_PWM_Start+0xb6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002820:	e023      	b.n	800286a <HAL_TIM_PWM_Start+0xfe>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d104      	bne.n	8002832 <HAL_TIM_PWM_Start+0xc6>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	e01b      	b.n	800286a <HAL_TIM_PWM_Start+0xfe>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d104      	bne.n	8002842 <HAL_TIM_PWM_Start+0xd6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	e013      	b.n	800286a <HAL_TIM_PWM_Start+0xfe>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d104      	bne.n	8002852 <HAL_TIM_PWM_Start+0xe6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002850:	e00b      	b.n	800286a <HAL_TIM_PWM_Start+0xfe>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b10      	cmp	r3, #16
 8002856:	d104      	bne.n	8002862 <HAL_TIM_PWM_Start+0xf6>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002860:	e003      	b.n	800286a <HAL_TIM_PWM_Start+0xfe>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2201      	movs	r2, #1
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fea2 	bl	80035bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a38      	ldr	r2, [pc, #224]	; (8002960 <HAL_TIM_PWM_Start+0x1f4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x148>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a37      	ldr	r2, [pc, #220]	; (8002964 <HAL_TIM_PWM_Start+0x1f8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x148>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a35      	ldr	r2, [pc, #212]	; (8002968 <HAL_TIM_PWM_Start+0x1fc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x148>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a34      	ldr	r2, [pc, #208]	; (800296c <HAL_TIM_PWM_Start+0x200>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x148>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a32      	ldr	r2, [pc, #200]	; (8002970 <HAL_TIM_PWM_Start+0x204>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x148>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a31      	ldr	r2, [pc, #196]	; (8002974 <HAL_TIM_PWM_Start+0x208>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_TIM_PWM_Start+0x14c>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_TIM_PWM_Start+0x14e>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a23      	ldr	r2, [pc, #140]	; (8002960 <HAL_TIM_PWM_Start+0x1f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d01d      	beq.n	8002914 <HAL_TIM_PWM_Start+0x1a8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e0:	d018      	beq.n	8002914 <HAL_TIM_PWM_Start+0x1a8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a24      	ldr	r2, [pc, #144]	; (8002978 <HAL_TIM_PWM_Start+0x20c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_TIM_PWM_Start+0x1a8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a22      	ldr	r2, [pc, #136]	; (800297c <HAL_TIM_PWM_Start+0x210>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00e      	beq.n	8002914 <HAL_TIM_PWM_Start+0x1a8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <HAL_TIM_PWM_Start+0x1f8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d009      	beq.n	8002914 <HAL_TIM_PWM_Start+0x1a8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_TIM_PWM_Start+0x1fc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <HAL_TIM_PWM_Start+0x1a8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_TIM_PWM_Start+0x208>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d115      	bne.n	8002940 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_TIM_PWM_Start+0x214>)
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b06      	cmp	r3, #6
 8002924:	d015      	beq.n	8002952 <HAL_TIM_PWM_Start+0x1e6>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d011      	beq.n	8002952 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293e:	e008      	b.n	8002952 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e000      	b.n	8002954 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40013400 	.word	0x40013400
 8002968:	40014000 	.word	0x40014000
 800296c:	40014400 	.word	0x40014400
 8002970:	40014800 	.word	0x40014800
 8002974:	40015000 	.word	0x40015000
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800
 8002980:	00010007 	.word	0x00010007

08002984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800299e:	2302      	movs	r3, #2
 80029a0:	e0ff      	b.n	8002ba2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b14      	cmp	r3, #20
 80029ae:	f200 80f0 	bhi.w	8002b92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	08002a0d 	.word	0x08002a0d
 80029bc:	08002b93 	.word	0x08002b93
 80029c0:	08002b93 	.word	0x08002b93
 80029c4:	08002b93 	.word	0x08002b93
 80029c8:	08002a4d 	.word	0x08002a4d
 80029cc:	08002b93 	.word	0x08002b93
 80029d0:	08002b93 	.word	0x08002b93
 80029d4:	08002b93 	.word	0x08002b93
 80029d8:	08002a8f 	.word	0x08002a8f
 80029dc:	08002b93 	.word	0x08002b93
 80029e0:	08002b93 	.word	0x08002b93
 80029e4:	08002b93 	.word	0x08002b93
 80029e8:	08002acf 	.word	0x08002acf
 80029ec:	08002b93 	.word	0x08002b93
 80029f0:	08002b93 	.word	0x08002b93
 80029f4:	08002b93 	.word	0x08002b93
 80029f8:	08002b11 	.word	0x08002b11
 80029fc:	08002b93 	.word	0x08002b93
 8002a00:	08002b93 	.word	0x08002b93
 8002a04:	08002b93 	.word	0x08002b93
 8002a08:	08002b51 	.word	0x08002b51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fa32 	bl	8002e7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0208 	orr.w	r2, r2, #8
 8002a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0204 	bic.w	r2, r2, #4
 8002a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6999      	ldr	r1, [r3, #24]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	619a      	str	r2, [r3, #24]
      break;
 8002a4a:	e0a5      	b.n	8002b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 faac 	bl	8002fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6999      	ldr	r1, [r3, #24]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	021a      	lsls	r2, r3, #8
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	619a      	str	r2, [r3, #24]
      break;
 8002a8c:	e084      	b.n	8002b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fb1f 	bl	80030d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0208 	orr.w	r2, r2, #8
 8002aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0204 	bic.w	r2, r2, #4
 8002ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69d9      	ldr	r1, [r3, #28]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	61da      	str	r2, [r3, #28]
      break;
 8002acc:	e064      	b.n	8002b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fb91 	bl	80031fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69d9      	ldr	r1, [r3, #28]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	021a      	lsls	r2, r3, #8
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	61da      	str	r2, [r3, #28]
      break;
 8002b0e:	e043      	b.n	8002b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fbe0 	bl	80032dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0208 	orr.w	r2, r2, #8
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0204 	bic.w	r2, r2, #4
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b4e:	e023      	b.n	8002b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fc2a 	bl	80033b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	021a      	lsls	r2, r3, #8
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b90:	e002      	b.n	8002b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]
      break;
 8002b96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop

08002bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0b6      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x18a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c04:	d03e      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0xd8>
 8002c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0a:	f200 8087 	bhi.w	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	f000 8086 	beq.w	8002d22 <HAL_TIM_ConfigClockSource+0x176>
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1a:	d87f      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c1c:	2b70      	cmp	r3, #112	; 0x70
 8002c1e:	d01a      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0xaa>
 8002c20:	2b70      	cmp	r3, #112	; 0x70
 8002c22:	d87b      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c24:	2b60      	cmp	r3, #96	; 0x60
 8002c26:	d050      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x11e>
 8002c28:	2b60      	cmp	r3, #96	; 0x60
 8002c2a:	d877      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c2c:	2b50      	cmp	r3, #80	; 0x50
 8002c2e:	d03c      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0xfe>
 8002c30:	2b50      	cmp	r3, #80	; 0x50
 8002c32:	d873      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d058      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x13e>
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d86f      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c3c:	2b30      	cmp	r3, #48	; 0x30
 8002c3e:	d064      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15e>
 8002c40:	2b30      	cmp	r3, #48	; 0x30
 8002c42:	d86b      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d060      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15e>
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d867      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d05c      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15e>
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d05a      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15e>
 8002c54:	e062      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c66:	f000 fc89 	bl	800357c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	609a      	str	r2, [r3, #8]
      break;
 8002c82:	e04f      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c94:	f000 fc72 	bl	800357c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca6:	609a      	str	r2, [r3, #8]
      break;
 8002ca8:	e03c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f000 fbe6 	bl	8003488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2150      	movs	r1, #80	; 0x50
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fc3f 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8002cc8:	e02c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f000 fc05 	bl	80034e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2160      	movs	r1, #96	; 0x60
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fc2f 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8002ce8:	e01c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f000 fbc6 	bl	8003488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fc1f 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8002d08:	e00c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f000 fc16 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8002d1a:	e003      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d20:	e000      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a42      	ldr	r2, [pc, #264]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d00f      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3f      	ldr	r2, [pc, #252]	; (8002e60 <TIM_Base_SetConfig+0x120>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3d      	ldr	r2, [pc, #244]	; (8002e68 <TIM_Base_SetConfig+0x128>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3c      	ldr	r2, [pc, #240]	; (8002e6c <TIM_Base_SetConfig+0x12c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01f      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d01b      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <TIM_Base_SetConfig+0x120>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d017      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <TIM_Base_SetConfig+0x128>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00f      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <TIM_Base_SetConfig+0x130>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <TIM_Base_SetConfig+0x134>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <TIM_Base_SetConfig+0x138>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <TIM_Base_SetConfig+0x12c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <TIM_Base_SetConfig+0x128>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00f      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <TIM_Base_SetConfig+0x130>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <TIM_Base_SetConfig+0x134>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a11      	ldr	r2, [pc, #68]	; (8002e78 <TIM_Base_SetConfig+0x138>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <TIM_Base_SetConfig+0x12c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d103      	bne.n	8002e48 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800
 8002e68:	40013400 	.word	0x40013400
 8002e6c:	40015000 	.word	0x40015000
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40014400 	.word	0x40014400
 8002e78:	40014800 	.word	0x40014800

08002e7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0303 	bic.w	r3, r3, #3
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f023 0302 	bic.w	r3, r3, #2
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a30      	ldr	r2, [pc, #192]	; (8002f98 <TIM_OC1_SetConfig+0x11c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <TIM_OC1_SetConfig+0x88>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <TIM_OC1_SetConfig+0x120>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00f      	beq.n	8002f04 <TIM_OC1_SetConfig+0x88>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <TIM_OC1_SetConfig+0x124>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00b      	beq.n	8002f04 <TIM_OC1_SetConfig+0x88>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <TIM_OC1_SetConfig+0x128>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d007      	beq.n	8002f04 <TIM_OC1_SetConfig+0x88>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <TIM_OC1_SetConfig+0x12c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d003      	beq.n	8002f04 <TIM_OC1_SetConfig+0x88>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <TIM_OC1_SetConfig+0x130>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10c      	bne.n	8002f1e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0308 	bic.w	r3, r3, #8
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <TIM_OC1_SetConfig+0x11c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <TIM_OC1_SetConfig+0xd2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <TIM_OC1_SetConfig+0x120>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00f      	beq.n	8002f4e <TIM_OC1_SetConfig+0xd2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <TIM_OC1_SetConfig+0x124>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00b      	beq.n	8002f4e <TIM_OC1_SetConfig+0xd2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <TIM_OC1_SetConfig+0x128>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <TIM_OC1_SetConfig+0xd2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <TIM_OC1_SetConfig+0x12c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d003      	beq.n	8002f4e <TIM_OC1_SetConfig+0xd2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a18      	ldr	r2, [pc, #96]	; (8002fac <TIM_OC1_SetConfig+0x130>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d111      	bne.n	8002f72 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	621a      	str	r2, [r3, #32]
}
 8002f8c:	bf00      	nop
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40013400 	.word	0x40013400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400
 8002fa8:	40014800 	.word	0x40014800
 8002fac:	40015000 	.word	0x40015000

08002fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0210 	bic.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f023 0320 	bic.w	r3, r3, #32
 8002ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a2c      	ldr	r2, [pc, #176]	; (80030c0 <TIM_OC2_SetConfig+0x110>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <TIM_OC2_SetConfig+0x74>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a2b      	ldr	r2, [pc, #172]	; (80030c4 <TIM_OC2_SetConfig+0x114>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_OC2_SetConfig+0x74>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <TIM_OC2_SetConfig+0x118>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10d      	bne.n	8003040 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800303e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <TIM_OC2_SetConfig+0x110>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <TIM_OC2_SetConfig+0xc0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a1e      	ldr	r2, [pc, #120]	; (80030c4 <TIM_OC2_SetConfig+0x114>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00f      	beq.n	8003070 <TIM_OC2_SetConfig+0xc0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <TIM_OC2_SetConfig+0x11c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00b      	beq.n	8003070 <TIM_OC2_SetConfig+0xc0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <TIM_OC2_SetConfig+0x120>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d007      	beq.n	8003070 <TIM_OC2_SetConfig+0xc0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <TIM_OC2_SetConfig+0x124>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_OC2_SetConfig+0xc0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <TIM_OC2_SetConfig+0x118>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d113      	bne.n	8003098 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003076:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800307e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40013400 	.word	0x40013400
 80030c8:	40015000 	.word	0x40015000
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40014400 	.word	0x40014400
 80030d4:	40014800 	.word	0x40014800

080030d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <TIM_OC3_SetConfig+0x10c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <TIM_OC3_SetConfig+0x72>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <TIM_OC3_SetConfig+0x110>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_OC3_SetConfig+0x72>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <TIM_OC3_SetConfig+0x114>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10d      	bne.n	8003166 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003164:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <TIM_OC3_SetConfig+0x10c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <TIM_OC3_SetConfig+0xbe>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <TIM_OC3_SetConfig+0x110>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_OC3_SetConfig+0xbe>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <TIM_OC3_SetConfig+0x118>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_OC3_SetConfig+0xbe>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <TIM_OC3_SetConfig+0x11c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_OC3_SetConfig+0xbe>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <TIM_OC3_SetConfig+0x120>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_OC3_SetConfig+0xbe>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a16      	ldr	r2, [pc, #88]	; (80031ec <TIM_OC3_SetConfig+0x114>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d113      	bne.n	80031be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800319c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	621a      	str	r2, [r3, #32]
}
 80031d8:	bf00      	nop
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40013400 	.word	0x40013400
 80031ec:	40015000 	.word	0x40015000
 80031f0:	40014000 	.word	0x40014000
 80031f4:	40014400 	.word	0x40014400
 80031f8:	40014800 	.word	0x40014800

080031fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800324a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	031b      	lsls	r3, r3, #12
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <TIM_OC4_SetConfig+0xc8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <TIM_OC4_SetConfig+0x8c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <TIM_OC4_SetConfig+0xcc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00f      	beq.n	8003288 <TIM_OC4_SetConfig+0x8c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a18      	ldr	r2, [pc, #96]	; (80032cc <TIM_OC4_SetConfig+0xd0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00b      	beq.n	8003288 <TIM_OC4_SetConfig+0x8c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <TIM_OC4_SetConfig+0xd4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <TIM_OC4_SetConfig+0x8c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <TIM_OC4_SetConfig+0xd8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_OC4_SetConfig+0x8c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <TIM_OC4_SetConfig+0xdc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d109      	bne.n	800329c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800328e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40013400 	.word	0x40013400
 80032cc:	40014000 	.word	0x40014000
 80032d0:	40014400 	.word	0x40014400
 80032d4:	40014800 	.word	0x40014800
 80032d8:	40015000 	.word	0x40015000

080032dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003320:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	041b      	lsls	r3, r3, #16
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <TIM_OC5_SetConfig+0xbc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <TIM_OC5_SetConfig+0x82>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <TIM_OC5_SetConfig+0xc0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00f      	beq.n	800335e <TIM_OC5_SetConfig+0x82>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <TIM_OC5_SetConfig+0xc4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_OC5_SetConfig+0x82>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <TIM_OC5_SetConfig+0xc8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_OC5_SetConfig+0x82>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <TIM_OC5_SetConfig+0xcc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_OC5_SetConfig+0x82>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a14      	ldr	r2, [pc, #80]	; (80033ac <TIM_OC5_SetConfig+0xd0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d109      	bne.n	8003372 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003364:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	621a      	str	r2, [r3, #32]
}
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40013400 	.word	0x40013400
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400
 80033a8:	40014800 	.word	0x40014800
 80033ac:	40015000 	.word	0x40015000

080033b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a1a      	ldr	r2, [pc, #104]	; (8003470 <TIM_OC6_SetConfig+0xc0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <TIM_OC6_SetConfig+0x84>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a19      	ldr	r2, [pc, #100]	; (8003474 <TIM_OC6_SetConfig+0xc4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00f      	beq.n	8003434 <TIM_OC6_SetConfig+0x84>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <TIM_OC6_SetConfig+0xc8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00b      	beq.n	8003434 <TIM_OC6_SetConfig+0x84>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a17      	ldr	r2, [pc, #92]	; (800347c <TIM_OC6_SetConfig+0xcc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_OC6_SetConfig+0x84>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a16      	ldr	r2, [pc, #88]	; (8003480 <TIM_OC6_SetConfig+0xd0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_OC6_SetConfig+0x84>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a15      	ldr	r2, [pc, #84]	; (8003484 <TIM_OC6_SetConfig+0xd4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d109      	bne.n	8003448 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	029b      	lsls	r3, r3, #10
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40013400 	.word	0x40013400
 8003478:	40014000 	.word	0x40014000
 800347c:	40014400 	.word	0x40014400
 8003480:	40014800 	.word	0x40014800
 8003484:	40015000 	.word	0x40015000

08003488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 030a 	bic.w	r3, r3, #10
 80034c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b087      	sub	sp, #28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f023 0210 	bic.w	r2, r3, #16
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	031b      	lsls	r3, r3, #12
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	f043 0307 	orr.w	r3, r3, #7
 8003568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	021a      	lsls	r2, r3, #8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	431a      	orrs	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	609a      	str	r2, [r3, #8]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2201      	movs	r2, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1a      	ldr	r2, [r3, #32]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1a      	ldr	r2, [r3, #32]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800361c:	2302      	movs	r3, #2
 800361e:	e06d      	b.n	80036fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a30      	ldr	r2, [pc, #192]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2f      	ldr	r2, [pc, #188]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d108      	bne.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003664:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d01d      	beq.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369c:	d018      	beq.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d013      	beq.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1a      	ldr	r2, [pc, #104]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00e      	beq.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a15      	ldr	r2, [pc, #84]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d009      	beq.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a16      	ldr	r2, [pc, #88]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d004      	beq.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a11      	ldr	r2, [pc, #68]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d10c      	bne.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40013400 	.word	0x40013400
 8003710:	40015000 	.word	0x40015000
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40014000 	.word	0x40014000

08003720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e040      	b.n	80037b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fc ff32 	bl	80005ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8f6 	bl	8003950 <UART_SetConfig>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e022      	b.n	80037b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fabe 	bl	8003cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fb45 	bl	8003e3c <UART_CheckIdleState>
 80037b2:	4603      	mov	r3, r0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	f040 80b6 	bne.w	8003944 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_Receive+0x28>
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0ae      	b.n	8003946 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2222      	movs	r2, #34	; 0x22
 80037f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fe:	f7fc ffd9 	bl	80007b4 <HAL_GetTick>
 8003802:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d10e      	bne.n	800383c <HAL_UART_Receive+0x80>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_UART_Receive+0x76>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f240 12ff 	movw	r2, #511	; 0x1ff
 800382c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003830:	e02d      	b.n	800388e <HAL_UART_Receive+0xd2>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	22ff      	movs	r2, #255	; 0xff
 8003836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800383a:	e028      	b.n	800388e <HAL_UART_Receive+0xd2>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_UART_Receive+0xa4>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <HAL_UART_Receive+0x9a>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003854:	e01b      	b.n	800388e <HAL_UART_Receive+0xd2>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	227f      	movs	r2, #127	; 0x7f
 800385a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800385e:	e016      	b.n	800388e <HAL_UART_Receive+0xd2>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003868:	d10d      	bne.n	8003886 <HAL_UART_Receive+0xca>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <HAL_UART_Receive+0xc0>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	227f      	movs	r2, #127	; 0x7f
 8003876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800387a:	e008      	b.n	800388e <HAL_UART_Receive+0xd2>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	223f      	movs	r2, #63	; 0x3f
 8003880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003884:	e003      	b.n	800388e <HAL_UART_Receive+0xd2>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003894:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	d108      	bne.n	80038b2 <HAL_UART_Receive+0xf6>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e003      	b.n	80038ba <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80038ba:	e037      	b.n	800392c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2120      	movs	r1, #32
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fb60 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e033      	b.n	8003946 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10c      	bne.n	80038fe <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	8a7b      	ldrh	r3, [r7, #18]
 80038ee:	4013      	ands	r3, r2
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	3302      	adds	r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e00d      	b.n	800391a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003904:	b29b      	uxth	r3, r3
 8003906:	b2da      	uxtb	r2, r3
 8003908:	8a7b      	ldrh	r3, [r7, #18]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4013      	ands	r3, r2
 800390e:	b2da      	uxtb	r2, r3
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3301      	adds	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1c1      	bne.n	80038bc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b92      	ldr	r3, [pc, #584]	; (8003bc4 <UART_SetConfig+0x274>)
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	6979      	ldr	r1, [r7, #20]
 8003984:	430b      	orrs	r3, r1
 8003986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	430a      	orrs	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a80      	ldr	r2, [pc, #512]	; (8003bc8 <UART_SetConfig+0x278>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d120      	bne.n	8003a0e <UART_SetConfig+0xbe>
 80039cc:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <UART_SetConfig+0x27c>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d817      	bhi.n	8003a08 <UART_SetConfig+0xb8>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0x90>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	080039fd 	.word	0x080039fd
 80039e8:	08003a03 	.word	0x08003a03
 80039ec:	080039f7 	.word	0x080039f7
 80039f0:	2301      	movs	r3, #1
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e0b5      	b.n	8003b62 <UART_SetConfig+0x212>
 80039f6:	2302      	movs	r3, #2
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e0b2      	b.n	8003b62 <UART_SetConfig+0x212>
 80039fc:	2304      	movs	r3, #4
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e0af      	b.n	8003b62 <UART_SetConfig+0x212>
 8003a02:	2308      	movs	r3, #8
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e0ac      	b.n	8003b62 <UART_SetConfig+0x212>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e0a9      	b.n	8003b62 <UART_SetConfig+0x212>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a6f      	ldr	r2, [pc, #444]	; (8003bd0 <UART_SetConfig+0x280>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d124      	bne.n	8003a62 <UART_SetConfig+0x112>
 8003a18:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <UART_SetConfig+0x27c>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a24:	d011      	beq.n	8003a4a <UART_SetConfig+0xfa>
 8003a26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a2a:	d817      	bhi.n	8003a5c <UART_SetConfig+0x10c>
 8003a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a30:	d011      	beq.n	8003a56 <UART_SetConfig+0x106>
 8003a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a36:	d811      	bhi.n	8003a5c <UART_SetConfig+0x10c>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <UART_SetConfig+0xf4>
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d006      	beq.n	8003a50 <UART_SetConfig+0x100>
 8003a42:	e00b      	b.n	8003a5c <UART_SetConfig+0x10c>
 8003a44:	2300      	movs	r3, #0
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e08b      	b.n	8003b62 <UART_SetConfig+0x212>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e088      	b.n	8003b62 <UART_SetConfig+0x212>
 8003a50:	2304      	movs	r3, #4
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e085      	b.n	8003b62 <UART_SetConfig+0x212>
 8003a56:	2308      	movs	r3, #8
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e082      	b.n	8003b62 <UART_SetConfig+0x212>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e07f      	b.n	8003b62 <UART_SetConfig+0x212>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5b      	ldr	r2, [pc, #364]	; (8003bd4 <UART_SetConfig+0x284>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d124      	bne.n	8003ab6 <UART_SetConfig+0x166>
 8003a6c:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <UART_SetConfig+0x27c>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003a74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a78:	d011      	beq.n	8003a9e <UART_SetConfig+0x14e>
 8003a7a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a7e:	d817      	bhi.n	8003ab0 <UART_SetConfig+0x160>
 8003a80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a84:	d011      	beq.n	8003aaa <UART_SetConfig+0x15a>
 8003a86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a8a:	d811      	bhi.n	8003ab0 <UART_SetConfig+0x160>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <UART_SetConfig+0x148>
 8003a90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a94:	d006      	beq.n	8003aa4 <UART_SetConfig+0x154>
 8003a96:	e00b      	b.n	8003ab0 <UART_SetConfig+0x160>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e061      	b.n	8003b62 <UART_SetConfig+0x212>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e05e      	b.n	8003b62 <UART_SetConfig+0x212>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e05b      	b.n	8003b62 <UART_SetConfig+0x212>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e058      	b.n	8003b62 <UART_SetConfig+0x212>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e055      	b.n	8003b62 <UART_SetConfig+0x212>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a47      	ldr	r2, [pc, #284]	; (8003bd8 <UART_SetConfig+0x288>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d124      	bne.n	8003b0a <UART_SetConfig+0x1ba>
 8003ac0:	4b42      	ldr	r3, [pc, #264]	; (8003bcc <UART_SetConfig+0x27c>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ac8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003acc:	d011      	beq.n	8003af2 <UART_SetConfig+0x1a2>
 8003ace:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ad2:	d817      	bhi.n	8003b04 <UART_SetConfig+0x1b4>
 8003ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ad8:	d011      	beq.n	8003afe <UART_SetConfig+0x1ae>
 8003ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ade:	d811      	bhi.n	8003b04 <UART_SetConfig+0x1b4>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <UART_SetConfig+0x19c>
 8003ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae8:	d006      	beq.n	8003af8 <UART_SetConfig+0x1a8>
 8003aea:	e00b      	b.n	8003b04 <UART_SetConfig+0x1b4>
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e037      	b.n	8003b62 <UART_SetConfig+0x212>
 8003af2:	2302      	movs	r3, #2
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e034      	b.n	8003b62 <UART_SetConfig+0x212>
 8003af8:	2304      	movs	r3, #4
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e031      	b.n	8003b62 <UART_SetConfig+0x212>
 8003afe:	2308      	movs	r3, #8
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e02e      	b.n	8003b62 <UART_SetConfig+0x212>
 8003b04:	2310      	movs	r3, #16
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e02b      	b.n	8003b62 <UART_SetConfig+0x212>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a33      	ldr	r2, [pc, #204]	; (8003bdc <UART_SetConfig+0x28c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d124      	bne.n	8003b5e <UART_SetConfig+0x20e>
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <UART_SetConfig+0x27c>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003b1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b20:	d011      	beq.n	8003b46 <UART_SetConfig+0x1f6>
 8003b22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b26:	d817      	bhi.n	8003b58 <UART_SetConfig+0x208>
 8003b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b2c:	d011      	beq.n	8003b52 <UART_SetConfig+0x202>
 8003b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b32:	d811      	bhi.n	8003b58 <UART_SetConfig+0x208>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <UART_SetConfig+0x1f0>
 8003b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3c:	d006      	beq.n	8003b4c <UART_SetConfig+0x1fc>
 8003b3e:	e00b      	b.n	8003b58 <UART_SetConfig+0x208>
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e00d      	b.n	8003b62 <UART_SetConfig+0x212>
 8003b46:	2302      	movs	r3, #2
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e00a      	b.n	8003b62 <UART_SetConfig+0x212>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e007      	b.n	8003b62 <UART_SetConfig+0x212>
 8003b52:	2308      	movs	r3, #8
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e004      	b.n	8003b62 <UART_SetConfig+0x212>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e001      	b.n	8003b62 <UART_SetConfig+0x212>
 8003b5e:	2310      	movs	r3, #16
 8003b60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6a:	d16b      	bne.n	8003c44 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003b6c:	7ffb      	ldrb	r3, [r7, #31]
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d838      	bhi.n	8003be4 <UART_SetConfig+0x294>
 8003b72:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <UART_SetConfig+0x228>)
 8003b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003ba5 	.word	0x08003ba5
 8003b80:	08003bad 	.word	0x08003bad
 8003b84:	08003be5 	.word	0x08003be5
 8003b88:	08003bb3 	.word	0x08003bb3
 8003b8c:	08003be5 	.word	0x08003be5
 8003b90:	08003be5 	.word	0x08003be5
 8003b94:	08003be5 	.word	0x08003be5
 8003b98:	08003bbb 	.word	0x08003bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b9c:	f7fe facc 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8003ba0:	61b8      	str	r0, [r7, #24]
        break;
 8003ba2:	e024      	b.n	8003bee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ba4:	f7fe faea 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8003ba8:	61b8      	str	r0, [r7, #24]
        break;
 8003baa:	e020      	b.n	8003bee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <UART_SetConfig+0x290>)
 8003bae:	61bb      	str	r3, [r7, #24]
        break;
 8003bb0:	e01d      	b.n	8003bee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb2:	f7fe fa4b 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8003bb6:	61b8      	str	r0, [r7, #24]
        break;
 8003bb8:	e019      	b.n	8003bee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbe:	61bb      	str	r3, [r7, #24]
        break;
 8003bc0:	e015      	b.n	8003bee <UART_SetConfig+0x29e>
 8003bc2:	bf00      	nop
 8003bc4:	efff69f3 	.word	0xefff69f3
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40004400 	.word	0x40004400
 8003bd4:	40004800 	.word	0x40004800
 8003bd8:	40004c00 	.word	0x40004c00
 8003bdc:	40005000 	.word	0x40005000
 8003be0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	77bb      	strb	r3, [r7, #30]
        break;
 8003bec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d073      	beq.n	8003cdc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	005a      	lsls	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b0f      	cmp	r3, #15
 8003c0e:	d916      	bls.n	8003c3e <UART_SetConfig+0x2ee>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c16:	d212      	bcs.n	8003c3e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f023 030f 	bic.w	r3, r3, #15
 8003c20:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	89fa      	ldrh	r2, [r7, #14]
 8003c3a:	60da      	str	r2, [r3, #12]
 8003c3c:	e04e      	b.n	8003cdc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	77bb      	strb	r3, [r7, #30]
 8003c42:	e04b      	b.n	8003cdc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c44:	7ffb      	ldrb	r3, [r7, #31]
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d827      	bhi.n	8003c9a <UART_SetConfig+0x34a>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0x300>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003c7d 	.word	0x08003c7d
 8003c58:	08003c85 	.word	0x08003c85
 8003c5c:	08003c9b 	.word	0x08003c9b
 8003c60:	08003c8b 	.word	0x08003c8b
 8003c64:	08003c9b 	.word	0x08003c9b
 8003c68:	08003c9b 	.word	0x08003c9b
 8003c6c:	08003c9b 	.word	0x08003c9b
 8003c70:	08003c93 	.word	0x08003c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7fe fa60 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8003c78:	61b8      	str	r0, [r7, #24]
        break;
 8003c7a:	e013      	b.n	8003ca4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c7c:	f7fe fa7e 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8003c80:	61b8      	str	r0, [r7, #24]
        break;
 8003c82:	e00f      	b.n	8003ca4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <UART_SetConfig+0x3a4>)
 8003c86:	61bb      	str	r3, [r7, #24]
        break;
 8003c88:	e00c      	b.n	8003ca4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c8a:	f7fe f9df 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8003c8e:	61b8      	str	r0, [r7, #24]
        break;
 8003c90:	e008      	b.n	8003ca4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c96:	61bb      	str	r3, [r7, #24]
        break;
 8003c98:	e004      	b.n	8003ca4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ca2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	085a      	lsrs	r2, r3, #1
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	441a      	add	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d909      	bls.n	8003cd8 <UART_SetConfig+0x388>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cca:	d205      	bcs.n	8003cd8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	e001      	b.n	8003cdc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ce8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df6:	d10a      	bne.n	8003e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b098      	sub	sp, #96	; 0x60
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e4c:	f7fc fcb2 	bl	80007b4 <HAL_GetTick>
 8003e50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d12e      	bne.n	8003ebe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f88c 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d021      	beq.n	8003ebe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e6      	bne.n	8003e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e062      	b.n	8003f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d149      	bne.n	8003f60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f856 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03c      	beq.n	8003f60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
 8003f06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e6      	bne.n	8003ee6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f38:	61fa      	str	r2, [r7, #28]
 8003f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	69b9      	ldr	r1, [r7, #24]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	617b      	str	r3, [r7, #20]
   return(result);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e011      	b.n	8003f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3758      	adds	r7, #88	; 0x58
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9c:	e049      	b.n	8004032 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d045      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7fc fc05 	bl	80007b4 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e048      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d031      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d110      	bne.n	8003ffe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f838 	bl	800405a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2208      	movs	r2, #8
 8003fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e029      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400c:	d111      	bne.n	8004032 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f81e 	bl	800405a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e00f      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	429a      	cmp	r2, r3
 800404e:	d0a6      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800405a:	b480      	push	{r7}
 800405c:	b095      	sub	sp, #84	; 0x54
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004080:	643b      	str	r3, [r7, #64]	; 0x40
 8004082:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e6      	bne.n	8004062 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3308      	adds	r3, #8
 800409a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3308      	adds	r3, #8
 80040b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e5      	bne.n	8004094 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d118      	bne.n	8004102 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f023 0310 	bic.w	r3, r3, #16
 80040e4:	647b      	str	r3, [r7, #68]	; 0x44
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6979      	ldr	r1, [r7, #20]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	613b      	str	r3, [r7, #16]
   return(result);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e6      	bne.n	80040d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004116:	bf00      	nop
 8004118:	3754      	adds	r7, #84	; 0x54
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <memset>:
 8004122:	4402      	add	r2, r0
 8004124:	4603      	mov	r3, r0
 8004126:	4293      	cmp	r3, r2
 8004128:	d100      	bne.n	800412c <memset+0xa>
 800412a:	4770      	bx	lr
 800412c:	f803 1b01 	strb.w	r1, [r3], #1
 8004130:	e7f9      	b.n	8004126 <memset+0x4>
	...

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4d0d      	ldr	r5, [pc, #52]	; (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	; (8004170 <__libc_init_array+0x3c>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2600      	movs	r6, #0
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4d0b      	ldr	r5, [pc, #44]	; (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	; (8004178 <__libc_init_array+0x44>)
 8004148:	f000 f818 	bl	800417c <_init>
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2600      	movs	r6, #0
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	080041cc 	.word	0x080041cc
 8004170:	080041cc 	.word	0x080041cc
 8004174:	080041cc 	.word	0x080041cc
 8004178:	080041d0 	.word	0x080041d0

0800417c <_init>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	bf00      	nop
 8004180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004182:	bc08      	pop	{r3}
 8004184:	469e      	mov	lr, r3
 8004186:	4770      	bx	lr

08004188 <_fini>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr
